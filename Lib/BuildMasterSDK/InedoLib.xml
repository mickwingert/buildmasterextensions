<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InedoLib</name>
    </assembly>
    <members>
        <member name="T:Inedo.Configuration.Config">
             <summary>
             When implemented by a derived class, represents configuration 
             within a portion of the application.
             </summary>
             <remarks>
             It is recommended that implementers use a singleton pattern and have
             strongly typed properties that wrap the protected Read/Write value
             </remarks>
             <example>
                 public sealed class ExampleConfig : Config
                 {
                     //private constructor + private single instance
                     ExampleConfig() : base("Example") { }
                     static readonly ExampleConfig i = new ExampleConfig();
            
                     public static int SomeProperty
                     {
                     get { return int.Parse(i.ReadValue("SomeProperty")); }
                     set { i.WriteValue("SomeProperty", value.ToString()); }
                     }
                 }
             </example>
        </member>
        <member name="M:Inedo.Configuration.Config.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Configuration.Config"/> class.
            </summary>
            <param name="scope">The configuration scope.</param>
        </member>
        <member name="M:Inedo.Configuration.Config.GetConfigSource">
            <summary>
            Loads the configuration <see cref="T:Inedo.Configuration.Sources.IConfigSource"/> associated with
            this configuration.
            </summary>
            <remarks>
            By default, an internal configuration source is used that reads values
            from the appSettings seciton of the .config file, concatenating the
            scope and key ("scope.key") to be used as the appsetting's value.
            </remarks>
            <returns><see cref="T:Inedo.Configuration.Sources.IConfigSource"/> representing the configuration source.</returns>
        </member>
        <member name="M:Inedo.Configuration.Config.ReadValue(System.String)">
            <summary>
            Reads the value for the specified key using the <see cref="T:Inedo.Configuration.Sources.IConfigSource"/>
            returned from <see cref="M:Inedo.Configuration.Config.GetConfigSource"/>.
            </summary>
            <param name="key">Key of the value to read.</param>
            <returns>Depending on the <see cref="T:Inedo.Configuration.Sources.IConfigSource"/>, the value of the key, null, or <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:Inedo.Configuration.Config.WriteValue(System.String,System.String)">
            <summary>
            Writes the value for the specified key using the <see cref="T:Inedo.Configuration.Sources.IConfigSource"/>
            returned from <see cref="M:Inedo.Configuration.Config.GetConfigSource"/>.
            </summary>
            <param name="key">The key of the value to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="P:Inedo.Configuration.Config.Scope">
            <summary>
            Gets the scope of the configuration items.
            </summary>
        </member>
        <member name="T:Inedo.Configuration.Sources.IConfigSource">
            <summary>
            Represents a source of configuration data as scoped key/value pairs.
            </summary>
        </member>
        <member name="M:Inedo.Configuration.Sources.IConfigSource.ReadConfigValue(System.String,System.String)">
            <summary>
            Returns the value associated with the specified scope and key.
            </summary>
            <param name="scope">Scope of the configuration value.</param>
            <param name="key">Key of the configuration value.</param>
            <returns>Value of the specified key in the specified scope.</returns>
        </member>
        <member name="M:Inedo.Configuration.Sources.IConfigSource.WriteConfigValue(System.String,System.String,System.String)">
            <summary>
            Writes the specified value for the specified scope and key.
            </summary>
            <param name="scope">Scope of the configuration value.</param>
            <param name="key">Key of the configuration value.</param>
            <param name="value">Value to write to the specified scope and key.</param>
        </member>
        <member name="M:Inedo.Configuration.Sources.AppSettingsConfigSource.ReadConfigValue(System.String,System.String)">
            <summary>
            Returns the value associated with the specified scope and key.
            </summary>
            <param name="scope">Scope of the configuration value.</param>
            <param name="key">Key of the configuration value.</param>
            <returns>
            Value of the specified key in the specified scope.
            </returns>
        </member>
        <member name="M:Inedo.Configuration.Sources.AppSettingsConfigSource.WriteConfigValue(System.String,System.String,System.String)">
            <summary>
            Writes the specified value for the specified scope and key.
            </summary>
            <param name="scope">Scope of the configuration value.</param>
            <param name="key">Key of the configuration value.</param>
            <param name="value">Value to write to the specified scope and key.</param>
        </member>
        <member name="T:Inedo.ConsoleUtilities.CommandLineArguments">
            <summary>
            Represents command line arguments for a <see cref="T:Inedo.ConsoleUtilities.ConsoleApplicationBase"/>
            </summary>
            <remarks>
            command line arguments are always in the form of:
              executablename [ACTION] [/OPT=VAL] [/OPT=VAL]
            </remarks>
        </member>
        <member name="M:Inedo.ConsoleUtilities.CommandLineArguments.#ctor(System.String[])">
            <summary>
            Creates a new instance of Arguments based on a string array of
            arguments separated by space
            </summary>
            <param name="args">An array of arguments</param>
        </member>
        <member name="P:Inedo.ConsoleUtilities.CommandLineArguments.ActionArgument">
            <summary>
            Gets the action argument.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.CommandLineArguments.Options">
            <summary>
            Gets the action options.
            </summary>
        </member>
        <member name="T:Inedo.ConsoleUtilities.ConsoleAction">
            <summary>
            Represents an action performed by a console application.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleAction.#ctor(System.String,System.String,Inedo.ConsoleUtilities.ConsoleActionDelegate,Inedo.ConsoleUtilities.ConsoleArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleAction"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleAction.GetArgument(System.String)">
            <summary>
            Returns the argument with the specified name or null if the argument is not found.
            </summary>
            <param name="name">The name of the argument.</param>
            <returns>The argument with the specified name or null if the argument is not found.</returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleAction.Name">
            <summary>
            Gets the name of the action.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleAction.Description">
            <summary>
            Gets the description of the action.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleAction.Action">
            <summary>
            Gets the action to perform.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleAction.Arguments">
            <summary>
            Gets the action's arguments.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleAction.AllArguments">
            <summary>
            Gets the action's arguments and global arguments.
            </summary>
        </member>
        <member name="T:Inedo.ConsoleUtilities.ConsoleActionDelegate">
            <summary>
            Represents a method invoked by a console action.
            </summary>
            <returns>Action exit code.</returns>
        </member>
        <member name="T:Inedo.ConsoleUtilities.ConsoleApplicationBase">
            <summary>
            Represents a console application.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleApplicationBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Args(System.String)">
            <summary>
            Argses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Prompt(System.String)">
            <summary>
            Prompts the user to enter data and returns it converted to the specified type;
            if an empty string is entered or conversion is not possible, user is optionally continously promted; otherwise, the default value for T is returned.
            </summary>
            <param name="prompt">Text to display.</param>
            <returns>
            Entered input or the default value.
            </returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.WrapText(System.String,System.Int32)">
            <summary>
            Wraps the specificed text (breaking on space) for the specified line length.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="maxLength">Maximum allowed line length.</param>
            <returns>An array of lines.</returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.GetActions">
            <summary>
            When implemented by a derived class, gets all of the <see cref="T:Inedo.ConsoleUtilities.ConsoleAction"/> that may be performed by the console application.
            </summary>
            <returns>An array of <see cref="T:Inedo.ConsoleUtilities.ConsoleAction"/>.</returns>
            <remarks>This is called exactly once during application start-up and, therefore, should be deterministic.</remarks>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.GetArguments">
            <summary>
            When implemented by a derived class, gets all of the <see cref="T:Inedo.ConsoleUtilities.ConsoleArgument"/> that are used by the console application.
            </summary>
            <returns>An array of <see cref="T:Inedo.ConsoleUtilities.ConsoleAction"/>.</returns>
            <remarks>This is called exactly once during application start-up and, therefore, should be deterministic.</remarks>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.WriteHeader">
            <summary>
            Writes header text to the console.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.WriteHelp">
            <summary>
            Writes help text to the console.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Menu">
            <summary>
            Executes the main Menu loop.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.WriteConfiguration">
            <summary>
            Writes current argument configuration to the console.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Main(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Executes what generally would be the main method.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The command arguments.</param>
            <returns>Exit code of the program.</returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.RunConsoleApplication``1(System.String[])">
            <summary>
            Runs the specified Console Application with the specified command line argument.
            </summary>
            <typeparam name="T">Type of <see cref="T:Inedo.ConsoleUtilities.ConsoleApplicationBase"/> to run.</typeparam>
            <param name="args">Command line arguments.</param>
            <returns>The exit code.</returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.OnStarting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Starting"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.OnClosing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Closing"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.OnUnhandledException(System.UnhandledExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:UnhandledException"/> event.
            </summary>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.OnConfigured(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Configured"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.CurrentAction">
            <summary>
            Gets the currently selected action.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.Title">
            <summary>
            Gets the application title.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.Description">
            <summary>
            Gets the application description.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.Version">
            <summary>
            Gets the application version.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.Copyright">
            <summary>
            Gets the application copyright.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleApplicationBase.Company">
            <summary>
            Gets the application company.
            </summary>
        </member>
        <member name="E:Inedo.ConsoleUtilities.ConsoleApplicationBase.Starting">
            <summary>
            An event triggered prior to <see cref="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Main(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/> being called.
            </summary>
        </member>
        <member name="E:Inedo.ConsoleUtilities.ConsoleApplicationBase.Closing">
            <summary>
            An event triggered after <see cref="M:Inedo.ConsoleUtilities.ConsoleApplicationBase.Main(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/> is called, unless Cancel has been called in <see cref="E:Inedo.ConsoleUtilities.ConsoleApplicationBase.Starting"/>.
            </summary>
        </member>
        <member name="E:Inedo.ConsoleUtilities.ConsoleApplicationBase.UnhandledException">
            <summary>
            An event triggered when an unhandled exception occurs.
            </summary>
        </member>
        <member name="E:Inedo.ConsoleUtilities.ConsoleApplicationBase.Configured">
            <summary>
            An event triggered after arguments have been entered.
            </summary>
        </member>
        <member name="T:Inedo.ConsoleUtilities.ConsoleArgument">
            <summary>
            Represents an argument for a console application.
            </summary>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleArgument.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleArgument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
            <param name="required">Value indicating whether the argument is required.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleArgument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleArgument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleArgument.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleArgument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.ConsoleArgument.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.ConsoleArgument"/> class.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="required">Value indicating whether the argument is required.</param>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleArgument.Name">
            <summary>
            Gets the argument name.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleArgument.Description">
            <summary>
            Gets the argument description.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleArgument.Required">
            <summary>
            Gets a value indicating whether this argument is required.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleArgument.DefaultValue">
            <summary>
            Gets the default value of the argument.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.ConsoleArgument.Value">
            <summary>
            Gets the value of the argument.
            </summary>
        </member>
        <member name="T:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2">
            <summary>
            Dictionary which refers to another dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2"/> class.
            </summary>
            <param name="values">The values.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            True if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            True if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:Inedo.ConsoleUtilities.MultilevelReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:Inedo.Data.DataDomain`1">
            <summary>
            Represents a domain of type codes.
            </summary>
            <typeparam name="TDomain">The type of the domain.</typeparam>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.DataDomain`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.Validate(System.String)">
            <summary>
            Validates the specified type code.
            </summary>
            <param name="code">The type code to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.GetName(System.String)">
            <summary>
            Gets the name of the specified type code.
            </summary>
            <param name="code">The type code.</param>
            <returns>The name of the specified type code.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="code"/> is not valid.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.GetValues">
            <summary>
            Returns the values of the domain.
            </summary>
            <returns>Values of the domain.</returns>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.ToArray">
            <summary>
            Returns an array containing the domain values.
            </summary>
            <returns>Array containing the domain values.</returns>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.ParseName(System.String)">
            <summary>
            Returns the code which corresponds to the specified domain name.
            </summary>
            <param name="name">The domain name to parse.</param>
            <returns>Code associated with the specified domain name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is not valid.</exception>
        </member>
        <member name="M:Inedo.Data.DataDomain`1.TryParseName(System.String)">
            <summary>
            Returns the code which corresponds to the specified domain name.
            </summary>
            <param name="name">The domain name to parse.</param>
            <returns>Code associated with the specified domain name if valid; otherwise null.</returns>
        </member>
        <member name="T:Inedo.Data.DataTableExtensions">
            <summary>
            Data-related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.Data.DataTableExtensions.AsStrongTyped``1(System.Data.DataTable)">
            <summary>
            Ases the strong typed.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.Data.ICreationDateRecord">
            <summary>
            Represents an item that was created at a specific time by a specific person.
            </summary>
        </member>
        <member name="P:Inedo.Data.ICreationDateRecord.CreatedOn_Date">
            <summary>
            Gets the time when the item was created.
            </summary>
        </member>
        <member name="P:Inedo.Data.ICreationDateRecord.CreatedBy_User_Name">
            <summary>
            Gets the person that created the item.
            </summary>
        </member>
        <member name="T:Inedo.Data.IModificationDateRecord">
            <summary>
            Represents an item that was modified at a specific time by a specific person.
            </summary>
        </member>
        <member name="P:Inedo.Data.IModificationDateRecord.ModifiedOn_Date">
            <summary>
            Gets the time when the item was modified.
            </summary>
        </member>
        <member name="P:Inedo.Data.IModificationDateRecord.ModifiedBy_User_Name">
            <summary>
            Gets the person that modified the item.
            </summary>
        </member>
        <member name="T:Inedo.Data.YNIndicator">
            <summary>
            Boolean type which is equivalent to the YNINDICATOR user defined type.
            </summary>
        </member>
        <member name="F:Inedo.Data.YNIndicator.Yes">
            <summary>
            The Yes (True) value.
            </summary>
        </member>
        <member name="F:Inedo.Data.YNIndicator.No">
            <summary>
            The No (False) value.
            </summary>
        </member>
        <member name="M:Inedo.Data.YNIndicator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.YNIndicator"/> struct.
            </summary>
            <param name="value">The value of the indicator.</param>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Equality(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            ==s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Inequality(Inedo.Data.YNIndicator,Inedo.Data.YNIndicator)">
            <summary>
            !=s the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_True(Inedo.Data.YNIndicator)">
            <summary>
            Trues the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_False(Inedo.Data.YNIndicator)">
            <summary>
            Falses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(Inedo.Data.YNIndicator)~System.String">
            <summary>
            Strings the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(Inedo.Data.YNIndicator)~System.Boolean">
            <summary>
            Booleans the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(System.Boolean)~Inedo.Data.YNIndicator">
            <summary>
            YNs the indicator.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.op_Implicit(System.String)~Inedo.Data.YNIndicator">
            <summary>
            YNs the indicator.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.CompareTo(Inedo.Data.YNIndicator)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other" /> parameter.
            Zero
            This object is equal to <paramref name="other" />.
            Greater than zero
            This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Equals(Inedo.Data.YNIndicator)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.Parse(System.String)">
            <summary>
            Parses the specified s.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Data.YNIndicator.TryParse(System.String)">
            <summary>
            Tries the parse.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.DescriptiveEnum`1">
            <summary>
            Encapsulates an enum value and provides a custom <see cref="M:System.Object.ToString"/>
            method implementation.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.DescriptiveEnum`1"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Inedo.DescriptiveEnum`1"/> struct.
            </summary>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_Equality(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Tests for equality of two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the instances are equal.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_Inequality(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Tests for inequality of two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the instances are not equal.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_LessThan(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Compares two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the comparison is true.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_LessThanOrEqual(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Compares two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the comparison is true.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_GreaterThan(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Compares two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the comparison is true.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_GreaterThanOrEqual(Inedo.DescriptiveEnum{`0},Inedo.DescriptiveEnum{`0})">
            <summary>
            Compares two instances.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <returns>Value indicating whether the comparison is true.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_Implicit(Inedo.DescriptiveEnum{`0})~`0">
            <summary>
            Returns the underlying value.
            </summary>
            <param name="value">Instance to convert.</param>
            <returns>The underlying value.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.op_Implicit(`0)~Inedo.DescriptiveEnum{`0}">
            <summary>
            Wraps a value with a new instance.
            </summary>
            <param name="value">Value to wrap.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.TryParse(System.String,System.StringComparison)">
            <summary>
            Returns an instance parsed from a string value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="comparison">Specifies how to parse the string.</param>
            <returns>Value parsed from the string or null if it could not be parsed.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.TryParse(System.String)">
            <summary>
            Returns an instance parsed from a string value.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>Value parsed from the string or null if it could not be parsed.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.Parse(System.String,System.StringComparison)">
            <summary>
            Returns an instance parsed from a string value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="comparison">Specifies how to parse the string.</param>
            <returns>Value parsed from the string or null.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.Parse(System.String)">
            <summary>
            Returns an instance parsed from a string value.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>Value parsed from the string.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.Equals(Inedo.DescriptiveEnum{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Inedo.DescriptiveEnum`1.CompareTo(Inedo.DescriptiveEnum{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="T:Inedo.Diagnostics.ConsoleMessenger">
            <summary>
            Standard console-based implementation of <see cref="T:Inedo.Diagnostics.IMessenger"/>.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.IMessenger">
            <summary>
            Represents something which can deliver messages.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Message(Inedo.Diagnostics.IMessage)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.IMessenger.Terminate">
            <summary>
            Terminates this instance.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.ConsoleMessenger.ConsoleLock">
            <summary>
            Instance to use for console synchronization.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Diagnostics.ConsoleMessenger"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Message(Inedo.Diagnostics.IMessage)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Message(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Sends a message with the specified message level.
            </summary>
            <param name="messageLevel">The level of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.ConsoleMessenger.Terminate">
            <summary>
            Terminates this instance.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.IMessage">
            <summary>
            Represents something which can deliver messages.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Level">
            <summary>
            Gets the message level.
            </summary>
        </member>
        <member name="P:Inedo.Diagnostics.IMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Inedo.EnumTextAttribute">
            <summary>
            Specifies text used to format an enum value.
            </summary>
        </member>
        <member name="M:Inedo.EnumTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.EnumTextAttribute"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Inedo.EnumTextAttribute.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib">
            <summary>
            Contains settings and configuration for InedoLib.
            </summary>
        </member>
        <member name="P:Inedo.InedoLib.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
        </member>
        <member name="T:Inedo.InedoLib.Util">
            <summary>
            Contains static utility methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.NullIf(System.Object,System.Object)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.NullIf(System.String,System.String)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.NullIf``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.NullIf``1(``0,System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.Coalesce(System.Object[])">
            <summary>
            Returns the first non-null or non-DBNull.Value expression among its arguments.
            </summary>
            <param name="args">Objects to test for null.</param>
            <returns>First non-null or non-DBNull.Value value.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.Coalesce``2(``0,``1)">
            <summary>
            Returns the first non-null or non-DBNull.Value expression among its arguments.
            </summary>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <param name="arg1">First object to test for null.</param>
            <param name="arg2">Second object to test for null.</param>
            <returns>First non-null or non-DBNull.Value value.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.CoalesceStr(System.Object[])">
            <summary>
            Returns the first non-null and non-string.Empty expression among its arguments.
            </summary>
            <param name="args">Objects to convert to strings and test for null or empty.</param>
            <returns>First non-null and non-string.Empty value.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.CoalesceStr``2(``0,``1)">
            <summary>
            Returns the first non-null and non string.Empty expression among the specified arguments.
            </summary>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>First non-null and non-string.Empty value.</returns>
        </member>
        <member name="T:Inedo.InedoLib.Util.JavaScript">
            <summary>
            Contains JavaScript-related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.WriteJson(System.IO.TextWriter,System.Object)">
            <summary>
            Writes an object as JSON-serialized data to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> used to write the JSON data.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.ToJson(System.Object)">
            <summary>
            Returns a JSON-format string of a serialized object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>JSON-formatted string representation of the object.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.JavaScript.JsonEncode(System.String)">
            <summary>
            Escapes characters necessary to encode the string in JSON format.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="T:Inedo.InedoLib.Util.Zip">
            <summary>
            Contains methods for working with zip files.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.Zip.Extract(System.String,System.String)">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipFile">The path of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.InedoLib.Util.Zip.Extract(System.IO.Stream,System.String)">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipStream">The backing stream of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.InedoLib.Util.Zip.Extract(System.String,System.String,System.Predicate{ICSharpCode.SharpZipLib.Zip.ZipEntry})">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipFile">The path of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <param name="shouldExtract">Delegate invoked to determine if an entry should be extracted. May be null.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="M:Inedo.InedoLib.Util.Zip.Extract(System.IO.Stream,System.String,System.Predicate{ICSharpCode.SharpZipLib.Zip.ZipEntry})">
            <summary>
            Extracts a zip file to the specified directory.
            </summary>
            <param name="zipStream">The backing stream of the zip file to extract.</param>
            <param name="targetDirectory">The directory to extract the zip file to.</param>
            <param name="shouldExtract">Delegate invoked to determine if an entry should be extracted. May be null.</param>
            <remarks>
            If <paramref name="targetDirectory"/> does not exist, it is created.
            </remarks>
        </member>
        <member name="T:Inedo.InedoLib.Util.DateTime">
            <summary>
            A collection of static <see cref="T:System.DateTime"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.DateTime.ParseN(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent
            using <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>; if the string is not a valid date time, null is returned
            </summary>
            <param name="dateTimeString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.DateTime"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.DateTime.RelativeDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Calculates the relative time from the specified dates
            </summary>
            <param name="referenceFromDate">The reference <see cref="T:System.DateTime"/> used to calculate relative time. Typically, this is <see cref="P:System.DateTime.Now"/>.</param>
            <param name="toDate">The <see cref="T:System.DateTime"/> with which the reference value will be compared.</param>
            <returns><see cref="T:System.String"/> containing relative time if dates are valid, otherwise an empty string.</returns>
        </member>
        <member name="T:Inedo.InedoLib.Util.Int">
            <summary>
            A collection of static <see cref="T:System.Int32"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLib.Util.Int.ParseN(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Int32"/> equivalent
            using <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>. If the string is not a valid integer, null is returned.
            </summary>
            <param name="intString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Int32"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.InedoLib.Util.Int.ParseZ(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Int32"/> equivalent
            using <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>. If the string is not a valid integer, 0 is returned.
            </summary>
            <param name="intString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Int32"/> value if parsing was successful; otherwise 0.</returns>
        </member>
        <member name="T:Inedo.Data.DatabaseFactory">
            <summary>
            A factory for database connections.
            </summary>
        </member>
        <member name="T:Inedo.Data.IDatabaseExecuter">
            <summary>
            Provides methods for executing queries against a database.
            </summary>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Returns a <see cref="T:System.Data.Common.DbParameter"/> created from the specified arguments.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="size">The size of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> created from the specified arguments.</returns>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.ExecuteDataSet(System.String,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            a <see cref="T:System.Data.DataSet"/> containing the results.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="tableNames">The names of the tables to be returned in the <see cref="T:System.Data.DataSet"/>.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataSet"/>.</returns>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            a <see cref="T:System.Data.DataTable"/> containing the results.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.ExecuteDataRow(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            the first row (or null if there are none) of the resulting <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataRow"/>.</returns>
        </member>
        <member name="M:Inedo.Data.IDatabaseExecuter.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            the first column of the first row of the resulting <see cref="T:System.Data.DataTable"/>
            (or null if there is none).
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>The output of the stored procedure as a scalar value.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.DatabaseFactory"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.GetConnectionString">
            <summary>
            Returns the connection string for the database.
            </summary>
            <returns>Connection string for the database.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.CreateCommand(System.String)">
            <summary>
            Returns a new instance of a <see cref="T:System.Data.Common.DbCommand"/> to run a stored procedure in the database.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <returns>New instance of a <see cref="T:System.Data.Common.DbCommand"/> which can be used to run the specified stored procedure.</returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Returns a <see cref="T:System.Data.Common.DbParameter"/> created from the specified arguments.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="size">The size of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
              <see cref="T:System.Data.Common.DbParameter"/> created from the specified arguments.
            </returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#ExecuteDataSet(System.String,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            a <see cref="T:System.Data.DataSet"/> containing the results.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="tableNames">The names of the tables to be returned in the <see cref="T:System.Data.DataSet"/>.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>
            The output of the stored procedure as a <see cref="T:System.Data.DataSet"/>.
            </returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            a <see cref="T:System.Data.DataTable"/> containing the results.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>
            The output of the stored procedure as a <see cref="T:System.Data.DataTable"/>.
            </returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#ExecuteDataRow(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            the first row (or null if there are none) of the resulting <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>
            The output of the stored procedure as a <see cref="T:System.Data.DataRow"/>.
            </returns>
        </member>
        <member name="M:Inedo.Data.DatabaseFactory.Inedo#Data#IDatabaseExecuter#ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the specified stored procedure using the specified parameters and returns
            the first column of the first row of the resulting <see cref="T:System.Data.DataTable"/>
            (or null if there is none).
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">The parameters to pass to the stored procedure.</param>
            <returns>
            The output of the stored procedure as a scalar value.
            </returns>
        </member>
        <member name="T:Inedo.Data.SqlServerDataFactory">
            <summary>
            Database factory for connecting to SQL Server.
            </summary>
        </member>
        <member name="M:Inedo.Data.SqlServerDataFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.SqlServerDataFactory"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.SqlServerDataFactory.CreateCommand(System.String)">
            <summary>
            Returns a new instance of a <see cref="T:System.Data.Common.DbCommand"/> to run a stored procedure in the database.
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <returns>
            New instance of a <see cref="T:System.Data.Common.DbCommand"/> which can be used to run the specified stored procedure.
            </returns>
        </member>
        <member name="T:Inedo.Data.WrappedSqlServerStoredProc">
            <summary>
            Represents a stored procedure on SQL Server.
            </summary>
        </member>
        <member name="T:Inedo.Data.WrappedStoredProcedure`1">
            <summary>
            A stored procedure wrapper with a specific data factory.
            </summary>
            <typeparam name="TDataFactory">Type of the data factory.</typeparam>
        </member>
        <member name="T:Inedo.Data.WrappedStoredProcedure">
            <summary>
            Represents a SQL Server stored procedure.
            </summary>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.WrappedStoredProcedure"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.GetDataFactory">
            <summary>
            Returns the data factory instance.
            </summary>
            <returns>The data factory instance.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.AddParam(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Adds the specified parameter to the internal parameter collection.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="dbType">Type of the parameter.</param>
            <param name="size">Size of the parameter.</param>
            <param name="direction">Direction of the parameter.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.GetParamVal``1(System.String)">
            <summary>
            Returns the value of the specified parameter casted to the specified type.
            </summary>
            <typeparam name="T">Type of the parameter.</typeparam>
            <param name="paramName">Name of the parameter.</param>
            <returns>Value of the specified parameter.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.ExecuteDataSet(System.String[])">
            <summary>
            Executes the stored procedure and returns
            a <see cref="T:System.Data.DataSet"/> containing the results.
            </summary>
            <param name="tableNames">The names of the tables to be returned in the <see cref="T:System.Data.DataSet"/>.</param>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataSet"/>.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.ExecuteDataTable">
            <summary>
            Executes the stored procedure and returns
            a <see cref="T:System.Data.DataTable"/> containing the results.
            </summary>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.ExecuteDataRow">
            <summary>
            Executes the stored procedure and returns
            the first row (or null if there are none) of the resulting <see cref="T:System.Data.DataTable"/>.
            </summary>
            <returns>The output of the stored procedure as a <see cref="T:System.Data.DataRow"/>.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.ExecuteScalar">
            <summary>
            Executes the stored procedure and returns
            the first column of the first row of the resulting <see cref="T:System.Data.DataTable"/>
            (or null if there is none).
            </summary>
            <returns>The output of the stored procedure as a scalar value.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure.ExecuteNonQuery">
            <summary>
            Executes the stored procedure.
            </summary>
        </member>
        <member name="P:Inedo.Data.WrappedStoredProcedure.ProcedureName">
            <summary>
            Gets the name of the stored procedure.
            </summary>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.WrappedStoredProcedure`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Data.WrappedStoredProcedure`1.GetDataFactory">
            <summary>
            Returns the data factory instance.
            </summary>
            <returns>The data factory instance.</returns>
        </member>
        <member name="M:Inedo.Data.WrappedSqlServerStoredProc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Data.WrappedSqlServerStoredProc"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Diagnostics.Logger">
            <summary>
            Contains methods for writing log messages.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.AddMessenger(Inedo.Diagnostics.IMessenger)">
            <summary>
            Adds a messenger to the logger.
            </summary>
            <param name="messenger">The messenger to add.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.ClearMessengers">
            <summary>
            Removes all messengers from the logger.
            </summary>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Debug(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Debug"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Debug"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Information(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Information"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Information(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Information"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Warning(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Warning"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Warning(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Warning"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>        
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Error(System.String)">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Error"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Diagnostics.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the specified message with <see cref="F:Inedo.Diagnostics.MessageLevel.Error"/> and <see cref="M:System.String.Format(System.String,System.Object[])"/> formatting
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Inedo.Diagnostics.MessageLevel">
            <summary>
            Indicates the significance of a logged message.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Debug">
            <summary>
            To be used for development debugging/analysis purposes.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Information">
            <summary>
            To be used for configuration debugging/analysis purposes.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Warning">
            <summary>
            An unexpected condition that is recoverable.
            </summary>
        </member>
        <member name="F:Inedo.Diagnostics.MessageLevel.Error">
            <summary>
            An unexpected condition that is not recoverable.
            </summary>
        </member>
        <member name="T:Inedo.Icons.Icon">
            <summary>
            An icon that is available in multiple sizes.
            </summary>
        </member>
        <member name="M:Inedo.Icons.Icon.GetResourceName(Inedo.Icons.IconDimensions)">
            <summary>
            Returns the name of the icon resource.
            </summary>
            <param name="dimensions">The requested dimensions of the icon.</param>
            <returns>Name of the icon resource.</returns>
        </member>
        <member name="T:Inedo.Icons.Icon.SharedStream">
            <summary>
            Provides access to the shared icon resource as a stream.
            </summary>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Icons.Icon.SharedStream"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
              </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative.
              </exception>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:Inedo.Icons.Icon.SharedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.
              </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative.
              </exception>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="P:Inedo.Icons.Icon.SharedStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.
              </returns>
        </member>
        <member name="P:Inedo.Icons.Icon.SharedStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.
              </returns>
        </member>
        <member name="P:Inedo.Icons.Icon.SharedStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.
              </returns>
        </member>
        <member name="P:Inedo.Icons.Icon.SharedStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
              </returns>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="P:Inedo.Icons.Icon.SharedStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
              </returns>
              
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="T:Inedo.Icons.IconDimensions">
            <summary>
            Represents the dimensions of an <see cref="T:Inedo.Icons.Icon"/>.
            </summary>
        </member>
        <member name="F:Inedo.Icons.IconDimensions.d10x10">
            <summary>
            A <see cref="T:Inedo.Icons.IconDimensions"/> of 10x10.
            </summary>
        </member>
        <member name="F:Inedo.Icons.IconDimensions.d13x13">
            <summary>
            A <see cref="T:Inedo.Icons.IconDimensions"/> of 13x13.
            </summary>
        </member>
        <member name="F:Inedo.Icons.IconDimensions.d16x16">
            <summary>
            A <see cref="T:Inedo.Icons.IconDimensions"/> of 16x16.
            </summary>
        </member>
        <member name="F:Inedo.Icons.IconDimensions.d24x24">
            <summary>
            A <see cref="T:Inedo.Icons.IconDimensions"/> of 24x24.
            </summary>
        </member>
        <member name="F:Inedo.Icons.IconDimensions.d128x128">
            <summary>
            A <see cref="T:Inedo.Icons.IconDimensions"/> of 128x128.
            </summary>
        </member>
        <member name="M:Inedo.Icons.IconDimensions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Icons.IconDimensions"/> class.
            </summary>
            <param name="width">The width of the icon in pixels.</param>
            <param name="height">The height of the icon in pixels.</param>
        </member>
        <member name="M:Inedo.Icons.IconDimensions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Icons.IconDimensions"/> class.
            </summary>
            <param name="size">The size of the icon in pixels.</param>
        </member>
        <member name="P:Inedo.Icons.IconDimensions.Width">
            <summary>
            Gets the icon width in pixels.
            </summary>
        </member>
        <member name="P:Inedo.Icons.IconDimensions.Height">
            <summary>
            Gets the icon height in pixels.
            </summary>
        </member>
        <member name="T:Inedo.Icons.IconRequestContext">
            <summary>
            Contains context information for an <see cref="T:Inedo.Icons.Icon"/> request.
            </summary>
        </member>
        <member name="M:Inedo.Icons.IconRequestContext.#ctor(Inedo.Icons.IconDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Icons.IconRequestContext"/> class.
            </summary>
            <param name="dimensions">The dimensions of the icon.</param>
        </member>
        <member name="P:Inedo.Icons.IconRequestContext.Dimensions">
            <summary>
            Gets the dimensions of the icon.
            </summary>
        </member>
        <member name="T:Inedo.IO.SlimMemoryStream">
            <summary>
            Stream backed by memory that is designed for minimal memory fragmentation.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
            <param name="initialData">The initial data used to populate the stream.</param>
            <param name="writable">Value indicating whether the stream should be writable.</param>
            <remarks>
            If <paramref name="writable"/> is true, a copy of <paramref name="initialData"/> is made;
            otherwise, the <see cref="T:Inedo.IO.SlimMemoryStream"/> will reference <paramref name="initialData"/> directly.
            </remarks>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.#ctor(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.IO.SlimMemoryStream"/> class.
            </summary>
            <param name="initialData">The initial data used to populate the stream.</param>
            <param name="writable">Value indicating whether the stream should be writable.</param>
            <param name="copy">Value indiating whether the <paramref name="initialData"/> array should be copied or referenced.</param>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all of the data in the <see cref="T:Inedo.IO.SlimMemoryStream"/> to a byte array.
            </summary>
            <param name="buffer">Array into which the data will be copied.</param>
            <param name="offset">Initial offset in <paramref name="buffer"/> to start writing bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.ToArray">
            <summary>
            Copies all of the data in the <see cref="T:Inedo.IO.SlimMemoryStream"/> to a byte array.
            </summary>
            <returns>Array containing the stream data.</returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.CreateCopy(System.Boolean)">
            <summary>
            Returns a new <see cref="T:Inedo.IO.SlimMemoryStream"/> instance backed by the same data as this instance.
            </summary>
            <param name="writable">Value indicating whether the new stream should be writable.</param>
            <returns>New <see cref="T:Inedo.IO.SlimMemoryStream"/> instance.</returns>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Inedo.IO.SlimMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Inedo.IO.SlimMemoryStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Inedo.IO.SlimMemoryStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="T:Inedo.IO.TemporaryStream">
            <summary>
            Contains methods for working with temporary streams.
            </summary>
        </member>
        <member name="M:Inedo.IO.TemporaryStream.Create(System.Int64)">
            <summary>
            Returns a temporary stream best suited for storing data of the specified length.
            </summary>
            <param name="expectedLength">Length of data which is expected to be written to the stream.</param>
            <returns>Stream back by data that will be accessible only until it is closed.</returns>
        </member>
        <member name="T:Inedo.Licensing.ActivationException">
            <summary>
            The exception that is thrown when an activation error occurs.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicensingException">
            <summary>
            The exception that is thrown when a licensing or activation error occurs.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Inedo.Licensing.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicensingException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Inedo.Licensing.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ActivationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.Licensing.BitReader">
            <summary>
            Contains utility methods for reading bits from an array.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BitReader.GetBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns the boolean value at the specified index.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:Inedo.Licensing.BitReader.GetInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns the integer value at the specified index.
            </summary>
            <param name="data">The data.</param>
            <param name="startIndex">The index.</param>
            <param name="length">The number of bits to read.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterLicenseKey">
            <summary>
            Represents a BuildMaster license key.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseKeyBase">
            <summary>
            Represents a license key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(Inedo.Licensing.LicenseKeyBase.KeyFormatAndBytes)">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class from being created.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.#ctor(Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseKeyBase"/> class.
            </summary>
            <param name="keyFormat">The key format.</param>
            <param name="data">The data.</param>
            <param name="validate">if set to <c>true</c> [validate].</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.GetKeyFormat(System.String)">
            <summary>
            Gets the key format.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.GetKeyBytes(System.String)">
            <summary>
            Gets the key bytes.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ValidateBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates the between.
            </summary>
            <param name="a">A.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ReadInt32(System.Int32,System.Int32)">
            <summary>
            Reads the entry.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseKeyBase.ReadBoolean(System.Int32)">
            <summary>
            Reads the boolean.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.KeyFormat">
            <summary>
            Gets the key format.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CustomerId">
            <summary>
            Gets the customer id.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.MajorVersion">
            <summary>
            Gets the major version.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.MinorVersion">
            <summary>
            Gets the minor version.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.Crc">
            <summary>
            Gets the CRC.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateYear">
            <summary>
            Gets the expires date year.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateMonth">
            <summary>
            Gets the expires date month.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDateDay">
            <summary>
            Gets the expires date day.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateYear">
            <summary>
            Gets the created date year.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateMonth">
            <summary>
            Gets the created date month.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDateDay">
            <summary>
            Gets the created date day.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ProductCode">
            <summary>
            Gets the product code.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.ExpiresDate">
            <summary>
            Gets the expires date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.CreatedDate">
            <summary>
            Gets the created date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.LicenseKeyBase.IsEnabled">
            <summary>
            Gets a value indicating whether the key is currently enabled.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat">
            <summary>
            Format of the license key.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X128">
            <summary>
            Original, BuildMaster-only format.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X160">
            <summary>
            BuildMaster 2.5 (only) and up.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.X160V2">
            <summary>
            Multiple-product key.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.LicenseKeyBase.LicenseKeyFormat.Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterLicenseKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.BuildMasterLicenseKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.LicenseType">
            <summary>
            Gets the license type.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxUsers">
            <summary>
            Gets the maximum users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxServers">
            <summary>
            Gets the maximum servers.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxLimitedUsers">
            <summary>
            Gets the maximum limited users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxApprovalUsers">
            <summary>
            Gets the maximum approval users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxFullUsers">
            <summary>
            Gets the maximum full users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.AllowExtensions">
            <summary>
            Gets a value indicating whether extensions are allowed.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxUsersReserved">
            <summary>
            Gets the maximum reserved users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ServerGroups">
            <summary>
            Gets a value indicating whether server groups are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.Ldap">
            <summary>
            Gets a value indicating whether LDAP is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ScopedPrivileges">
            <summary>
            Gets a value indicating whether scoped privileges are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MaxApplications">
            <summary>
            Gets the maximum applications.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.MultipleActiveBuilds">
            <summary>
            Gets a value indicating whether multiple active builds are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ConfigFilesUnlimited">
            <summary>
            Gets a value indicating whether config files are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ConfigFileTemplates">
            <summary>
            Gets a value indicating whether config file templates are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DatabasesUnlimited">
            <summary>
            Gets a value indicating whether database providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ChangeScriptDeployer">
            <summary>
            Gets a value indicating whether the change script deployer is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployablesUnlimited">
            <summary>
            Gets a value indicating whether deployables are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployableDependencies">
            <summary>
            Gets a value indicating whether deployable dependencies are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.DeployablesImportedUnlimited">
            <summary>
            Gets a value indicating whether imported deployables are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.WorkflowsUnlimited">
            <summary>
            Gets a value indicating whether workflows are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.BuildSchedulesUnlimited">
            <summary>
            Gets a value indicating whether build schedules are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.EnvironmentsUnlimited">
            <summary>
            Gets a value indicating whether the environments are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.ChangeControls">
            <summary>
            Gets a value indicating whether change controls are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.GroupApprovals">
            <summary>
            Gets a value indicating whether group approvals are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.PromotionRequirements">
            <summary>
            Gets a value indicating whether promotion requirements are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.IssueTrackersUnlimited">
            <summary>
            Gets a value indicating whether issue tracking providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.SourceControlUnlimited">
            <summary>
            Gets a value indicating whether source control providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterLicenseKey.UserClassesActive">
            <summary>
            Gets a value indicating whether user classes are available.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterLicenseType">
            <summary>
            Specifies the type of a BuildMaster license.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Enterprise">
            <summary>
            BuildMaster Enterprise.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.EnterpriseTrial">
            <summary>
            BuildMaster Enterprise Trial.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Free">
            <summary>
            BuildMaster Free.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.BuildMasterLicenseType.Plus">
            <summary>
            BuildMaster Plus.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.BuildMasterMultiLicenseKey">
            <summary>
            Represents multiple BuildMaster license keys that act as one.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1">
            <summary>
            Represents a license key that is a combination of other license keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.EnsureValidLicense">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> if there are no valid license keys.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Max``1(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{``0})">
            <summary>
            Returns the maximum of all of the specified field values.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Maximum field value.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.FirstOrDefault``1(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{``0})">
            <summary>
            Returns the specified field value of the first key, or null if there are no keys.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="getValue">Method which returns the field value.</param>
            <returns>First field value.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Any(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{System.Boolean})">
            <summary>
            Returns a value indicating whether any of the specified field values are set.
            </summary>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Value indicating whether any of the field values are set.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.Sum(Inedo.Licensing.MultiLicenseKey{`0}.GetKeyValue{System.Int32})">
            <summary>
            Returns the sum of all of the specified field values.
            </summary>
            <param name="getValue">Method which returns the field value.</param>
            <returns>Sum of the field values.</returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.IsKeyEnabled(`0)">
            <summary>
            Returns a value indicating whether a given key should be treated as enabled.
            </summary>
            <param name="key">The key to test.</param>
            <returns>True if the key should be considered enabled; otherwise false.</returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.Keys">
            <summary>
            Gets the collection of keys contained in this <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> instance.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.CustomerId">
            <summary>
            Gets the customer id.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ExpiresDate">
            <summary>
            Gets the latest key expiration date.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.CanonicalKey">
            <summary>
            Gets the canonical key of this multilicense key.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.GetKeyValue`1">
            <summary>
            Represents a method which returns a field of a key.
            </summary>
            <typeparam name="T">Type of the field value.</typeparam>
            <param name="key">The key.</param>
            <returns>Field value of the key.</returns>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection">
            <summary>
            Represents a collection of keys in a <see cref="T:Inedo.Licensing.MultiLicenseKey`1"/> instance.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.#ctor(System.Collections.Generic.List{Inedo.Licensing.MultiLicenseKey{`0}.ValidatedLicenseKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.Item(System.Int32)">
            <summary>
            Gets the key at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.System#Collections#Generic#IList{Inedo#Licensing#MultiLicenseKey{TKey}#ValidatedLicenseKey}#Item(System.Int32)">
            <summary>
            Gets or sets the key at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.LicenseKeyCollection.System#Collections#Generic#ICollection{Inedo#Licensing#MultiLicenseKey{TKey}#ValidatedLicenseKey}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey">
            <summary>
            Represents a license key that may or may not be valid.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.op_Implicit(Inedo.Licensing.MultiLicenseKey{`0}.ValidatedLicenseKey)~`0">
            <summary>
            Ts the key.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.IsValid">
            <summary>
            Gets a value indicating whether the license key is valid.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.MultiLicenseKey`1.ValidatedLicenseKey.IsEnabled">
            <summary>
            Gets a value indicating whether the key is enabled.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterMultiLicenseKey.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.BuildMasterMultiLicenseKey"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Inedo.Licensing.BuildMasterMultiLicenseKey.IsKeyEnabled(Inedo.Licensing.BuildMasterLicenseKey)">
            <summary>
            Returns a value indicating whether a given key should be treated as enabled.
            </summary>
            <param name="key">The key to test.</param>
            <returns>True if the key should be considered enabled; otherwise false.</returns>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.LicenseType">
            <summary>
            Gets the license type.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.CreatedDate">
            <summary>
            Gets the date the key was created.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxUsers">
            <summary>
            Gets the maximum users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxServers">
            <summary>
            Gets the maximum servers.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxFullUsers">
            <summary>
            Gets the maximum full users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxLimitedUsers">
            <summary>
            Gets the maximum limited users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxApprovalUsers">
            <summary>
            Gets the maximum approval users.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MaxApplications">
            <summary>
            Gets the maximum applications.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial key.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.EnvironmentsUnlimited">
            <summary>
            Gets a value indicating whether the environments are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ServerGroups">
            <summary>
            Gets a value indicating whether server groups are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.Ldap">
            <summary>
            Gets a value indicating whether LDAP is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ScopedPrivileges">
            <summary>
            Gets a value indicating whether scoped privileges are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.MultipleActiveBuilds">
            <summary>
            Gets a value indicating whether multiple active builds are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ConfigFilesUnlimited">
            <summary>
            Gets a value indicating whether config files are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ConfigFileTemplates">
            <summary>
            Gets a value indicating whether config file templates are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DatabasesUnlimited">
            <summary>
            Gets a value indicating whether database providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ChangeScriptDeployer">
            <summary>
            Gets a value indicating whether the change script deployer is available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployablesUnlimited">
            <summary>
            Gets a value indicating whether deployables are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployableDependencies">
            <summary>
            Gets a value indicating whether deployable dependencies are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.DeployablesImportedUnlimited">
            <summary>
            Gets a value indicating whether imported deployables are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.WorkflowsUnlimited">
            <summary>
            Gets a value indicating whether workflows are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.BuildSchedulesUnlimited">
            <summary>
            Gets a value indicating whether build schedules are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.ChangeControls">
            <summary>
            Gets a value indicating whether change controls are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.GroupApprovals">
            <summary>
            Gets a value indicating whether group approvals are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.PromotionRequirements">
            <summary>
            Gets a value indicating whether promotion requirements are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.IssueTrackersUnlimited">
            <summary>
            Gets a value indicating whether issue tracking providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.SourceControlUnlimited">
            <summary>
            Gets a value indicating whether source control providers are unlimited.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.UserClassesActive">
            <summary>
            Gets a value indicating whether user classes are available.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.BuildMasterMultiLicenseKey.CanonicalKey">
            <summary>
            Gets the first enabled non-plus key.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ILicenseable">
            <summary>
            Describes something which can be licensed.
            </summary>
        </member>
        <member name="P:Inedo.Licensing.ILicenseable.LicenseRequired">
            <summary>
            Gets a value indicating whether a valid license is required.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseNotRequiredAttribute">
            <summary>
            Indicates that a valid license is not needed.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseNotRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.LicenseNotRequiredAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.LicenseValidator">
            <summary>
            Provides methods for license validation.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.Validate``1(System.String,System.String,System.Boolean)">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> or <see cref="T:Inedo.Licensing.ActivationException"/> if the activation
            code is not valid and the grace period does not apply, or if the license key is invalid or not set.
            </summary>
            <typeparam name="TKey">Type or the license key.</typeparam>
            <param name="licenseKey">The license key.</param>
            <param name="activationCode">The activation code.</param>
            <param name="allowActivationGracePeriod">Value indicating whether to enable the activation grace period.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.Validate(Inedo.Licensing.LicenseKeyBase,System.String,System.Boolean)">
            <summary>
            Throws a <see cref="T:Inedo.Licensing.LicensingException"/> or <see cref="T:Inedo.Licensing.ActivationException"/> if the activation
            code is not valid and the grace period does not apply.
            </summary>
            <param name="licenseKey">The activated license key.</param>
            <param name="activationCode">The activation code.</param>
            <param name="allowActivationGracePeriod">Value indicating whether to enable the activation grace period.</param>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,System.String,System.String)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <param name="machineUID">The machine UID.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,System.String)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Licensing.LicenseValidator.ValidateActivationCode(System.String,Inedo.Licensing.LicenseKeyBase)">
            <summary>
            Validates the legitimacy of the activation code.
            </summary>
            <param name="activationCode">The activation code to validate.</param>
            <param name="licenseKey">The license key.</param>
            <returns>True if the activation code is valid; otherwise false.</returns>
        </member>
        <member name="P:Inedo.Licensing.LicenseValidator.MachineUID">
            <summary>
            Gets the UID of the machine.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProductCode">
            <summary>
            Represents a product code.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProductCode.BuildMaster">
            <summary>
            BuildMaster.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProductCode.ProGet">
            <summary>
            ProGet.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProGetLicenseKey">
            <summary>
            Represents a ProGet license key.
            </summary>
        </member>
        <member name="M:Inedo.Licensing.ProGetLicenseKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Licensing.ProGetLicenseKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Inedo.Licensing.ProGetLicenseKey.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="T:Inedo.Licensing.ProGetLicenseType">
            <summary>
            Specifies the type of a ProGet license.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Enterprise">
            <summary>
            ProGet Enterprise.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.EnterpriseTrial">
            <summary>
            ProGet Enterprise Trial.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Free">
            <summary>
            ProGet Free.
            </summary>
        </member>
        <member name="F:Inedo.Licensing.ProGetLicenseType.Beta">
            <summary>
            ProGet Beta.
            </summary>
        </member>
        <member name="T:Inedo.Proxies.ObjectProxyBase">
            <summary>
            Represents a the base class for ObjectProxy&lt;T&gt;; this is not intended to be implemented directly.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Proxies.ObjectProxyBase"/> class from being created.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ObjectProxyBase"/> class.
            </summary>
            <param name="classToProxy">The class to proxy.</param>
        </member>
        <member name="T:Inedo.Proxies.ObjectProxyBase`1">
            <summary>
            Represents the base class for proxies, which allow for methods to be remotely executed.
            </summary>
            <typeparam name="T">Type of the object to proxy.</typeparam>
        </member>
        <member name="F:Inedo.Proxies.ObjectProxyBase`1.RealObject">
            <summary>
            The actual object that was passed into the method.
            </summary>
        </member>
        <member name="F:Inedo.Proxies.ObjectProxyBase`1.ProxiedObject">
            <summary>
            The transparent proxy created by <see cref="M:System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy"/>.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase`1.#ctor(System.Type)">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Proxies.ObjectProxyBase`1"/> class from being created.
            </summary>
            <param name="classToProxy">The class to proxy.</param>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ObjectProxyBase`1"/> class.
            </summary>
            <param name="objectToProxy">The object to proxy.</param>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase`1.ShouldProxyExecute(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method should execute via proxy.
            </summary>
            <param name="minf">The minf.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invokes the given msg, either local or via proxy.
            </summary>
            <param name="msg">The msg.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Inedo.Proxies.ObjectProxyBase`1.ProxyExecute(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Executes the method via proxy.
            </summary>
            <param name="methodCallMessage">The method call message.</param>
            <returns>The return message.</returns>
        </member>
        <member name="T:Inedo.Proxies.ProxyException">
            <summary>
            The exception that is thrown when an object cannot be proxied.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ProxyException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ProxyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Proxies.ProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ProxyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.Proxies.ProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ProxyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.Proxies.ShouldProxyExecuteAttribute">
            <summary>
            Specifies when a method, property, or field should be
            executed locally or remotely on a proxy object.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ShouldProxyExecuteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ShouldProxyExecuteAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Proxies.ShouldProxyExecuteAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Proxies.ShouldProxyExecuteAttribute"/> class.
            </summary>
            <param name="forceProxyExecution">Value indicating whether the member should be executed remotely.</param>
        </member>
        <member name="P:Inedo.Proxies.ShouldProxyExecuteAttribute.ForceProxyExecution">
            <summary>
            Gets a value indicating whether the member should be executed remotely.
            </summary>
        </member>
        <member name="T:Inedo.TimedExecuterBase">
            <summary>
            Runs a task periodically.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.TimedExecuterBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Start">
            <summary>
            Starts the executer if it is not already running.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Stop">
            <summary>
            Stops the executer if it is running.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Stop(System.Boolean)">
            <summary>
            Stops the executer if it is running.
            </summary>
            <param name="interrupt">Value indicating whether the executer should be interrupted.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStarting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Starting"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Started"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStopping(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Stopping"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnStopped(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Stopped"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.OnUnhandledException(System.UnhandledExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:UnhandledException"/> event.
            </summary>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.TimedExecuterBase.Execute">
            <summary>
            Invoked periodically as specified in the <see cref="P:Inedo.TimedExecuterBase.Throttle"/> property.
            </summary>
        </member>
        <member name="M:Inedo.TimedExecuterBase.ExecuteMethodHost(System.Object)">
            <summary>
            Wraps the call to <see cref="M:Inedo.TimedExecuterBase.Execute"/>.
            </summary>
            <param name="state">Unused.</param>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Starting">
            <summary>
            Raised before the executer has started.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Started">
            <summary>
            Raised immediately after the executer has started.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Stopping">
            <summary>
            Raised before the executer has stopped.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.Stopped">
            <summary>
            Raised immediately after the executor has stopped.
            </summary>
        </member>
        <member name="E:Inedo.TimedExecuterBase.UnhandledException">
            <summary>
            Raised when an unhandled exceptions occurs.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.IsRunning">
            <summary>
            Gets a value indicating whether the executer is running.
            </summary>
        </member>
        <member name="P:Inedo.TimedExecuterBase.Throttle">
            <summary>
            Gets the time in seconds between calls to <see cref="M:Inedo.TimedExecuterBase.Execute"/>.
            </summary>
        </member>
        <member name="T:Inedo.InedoLibExtensions">
            <summary>
            Contains static utility helper methods.
            </summary>
        </member>
        <member name="M:Inedo.InedoLibExtensions.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns an attribute (typed <typeparamref name="T"/>) if it is present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attribute if it was found; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is null.</exception>
        </member>
        <member name="M:Inedo.InedoLibExtensions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the attributes (typed <typeparamref name="T"/>) if any are present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attributes that were found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is null.</exception>
        </member>
        <member name="M:Inedo.InedoLibExtensions.GetGenericArgumentsFromAncestor(System.Type,System.Type)">
            <summary>
            Returns the generic arguments from an ancestor with the specified generic type definition from the specified type, or an empty type array if the 
            type's ancestors do not implement the specified generic type definition.
            </summary>
            <param name="type">Type to inspect.</param>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <returns>A type arguments array or an empty array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null or <paramref name="genericTypeDefinition"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="M:Inedo.InedoLibExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The value to return if the key was not found.</param>
            <returns>The value associated with the specified key, or <paramref name="defaultValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Inedo.InedoLibExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to get the value from.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key, or the default value of <typeparamref name="TValue"/> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null or <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Inedo.UndisclosedAttribute">
            <summary>
            Indicates that something is undisclosed.
            </summary>
        </member>
        <member name="M:Inedo.UndisclosedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.UndisclosedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.UndisclosedNamespaceAttribute">
            <summary>
            Indicates that a namespace is undisclosed.
            </summary>
        </member>
        <member name="M:Inedo.UndisclosedNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.UndisclosedNamespaceAttribute"/> class.
            </summary>
            <param name="namespaceName">The namespace that is undisclosed.</param>
        </member>
        <member name="P:Inedo.UndisclosedNamespaceAttribute.Namespace">
            <summary>
            Gets the namespace that is undisclosed.
            </summary>
        </member>
        <member name="T:Inedo.Web.AssemblyGeneratedCacheableContent">
            <summary>
            Contains methods for setting cacheablity of generated content.
            </summary>
        </member>
        <member name="M:Inedo.Web.AssemblyGeneratedCacheableContent.EnableCaching(System.Web.HttpContext,System.DateTime)">
            <summary>
            Enables caching of content, returning a 304 if possible.
            </summary>
            <param name="context">The HTTP context of the request.</param>
            <param name="lastModified">The last modified time of the content in local time.</param>
            <returns>True if request resulted in a 304; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.AssemblyGeneratedCacheableContent.EnableCaching(System.Web.HttpContext,System.DateTime,System.String)">
            <summary>
            Enables caching of content, returning a 304 if possible.
            </summary>
            <param name="context">The HTTP context of the request.</param>
            <param name="lastModified">The last modified time of the content in local time.</param>
            <param name="etag">The entity tag of the content. May be null.</param>
            <returns>True if request resulted in a 304; otherwise false.</returns>
        </member>
        <member name="T:Inedo.Web.ClientResources.CreateClientResource">
            <summary>
            Returns an instance of a client resource.
            </summary>
            <returns>Client resource instance.</returns>
        </member>
        <member name="T:Inedo.Web.ClientResources.IClientResource">
            <summary>
            Represents a client resource such as a javascript or css file.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResource.GetKey(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns the unique key of the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>Unique key of the resource.</returns>
            <remarks>This should generally be the script file name.</remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResource.GetCompatibleVersions(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the versions that are compatible with the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>Collection of the versions that are compatible with the resource.</returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResource.GetDependencies(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the resources which this resource depends on.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>Collection of the resources which this resource depends on.</returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResource.Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.IClientResourceManagerHost">
            <summary>
            Describes something that can host client resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.IClientResourceManagerHost.IncludeClientResource(Inedo.Web.ClientResources.IClientResource)">
            <summary>
            Includes the script.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="P:Inedo.Web.ClientResources.IClientResourceManagerHost.TargetClientResourceVersion">
            <summary>
            Gets the target client script version.
            </summary>
            <value>The target client script version.</value>
        </member>
        <member name="T:Inedo.Web.ClientResources.InedoLibCR">
            <summary>
            Defines client resources.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.JavascriptResource">
            <summary>
            Represents a Javascript file.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.ScriptFileResource">
            <summary>
            Represents a simple file-based resource that may have dependencies.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ScriptFileResource"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Inedo#Web#ClientResources#IClientResource#GetKey(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns the unique key of the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>Unique key of the resource.</returns>
            <remarks>This should generally be the script file name.</remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Inedo#Web#ClientResources#IClientResource#GetCompatibleVersions(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the versions that are compatible with the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>
            Collection of the versions that are compatible with the resource.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Inedo#Web#ClientResources#IClientResource#GetDependencies(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the resources which this resource depends on.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>
            Collection of the resources which this resource depends on.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Inedo#Web#ClientResources#IClientResource#Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ScriptFileResource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="P:Inedo.Web.ClientResources.ScriptFileResource.ResourcePath">
            <summary>
            Gets or sets the resource path.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ScriptFileResource.CompatibleVersions">
            <summary>
            Gets the collection of compatible versions.
            </summary>
        </member>
        <member name="P:Inedo.Web.ClientResources.ScriptFileResource.Dependencies">
            <summary>
            Gets the collection of dependencies.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.JavascriptResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.JavascriptResource"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.JavascriptResource.Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.ResourceVersion">
            <summary>
            Represents a client resource version.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ResourceVersion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ResourceVersion"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ResourceVersion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ResourceVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.ResourceVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="P:Inedo.Web.ClientResources.ResourceVersion.Version">
            <summary>
            Gets the resource version.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.ClientResourceManager">
            <summary>
            Represents a control in the HEAD of a page that manages and renders
            client scripts and their dependencies.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.ClientResourceManager"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.IncludeClientResource(Inedo.Web.ClientResources.IClientResource)">
            <summary>
            Includes the script and all of its dependents.
            </summary>
            <param name="resource">The script.</param>
        </member>
        <member name="M:Inedo.Web.ClientResources.ClientResourceManager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.ClientResources.ClientResourceManager.TargetVersion">
            <summary>
            Gets or sets the target version.
            </summary>
        </member>
        <member name="T:Inedo.Web.ClientResources.StylesheetResource">
            <summary>
            Represents a CSS file.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.StylesheetResource"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.StylesheetResource.Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="T:Inedo.Web.ClientResources.VersionMappedClientResource">
            <summary>
            Represents a script that maps one or more scripts to versions.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.VersionMappedClientResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.ClientResources.VersionMappedClientResource"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.ClientResources.VersionMappedClientResource.Inedo#Web#ClientResources#IClientResource#GetKey(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns the unique key of the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>Unique key of the resource.</returns>
            <remarks>This should generally be the script file name.</remarks>
        </member>
        <member name="M:Inedo.Web.ClientResources.VersionMappedClientResource.Inedo#Web#ClientResources#IClientResource#GetCompatibleVersions(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the versions that are compatible with the resource.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>
            Collection of the versions that are compatible with the resource.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.VersionMappedClientResource.Inedo#Web#ClientResources#IClientResource#GetDependencies(Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Returns a collection of the resources which this resource depends on.
            </summary>
            <param name="resourceManager">The current resource manager.</param>
            <returns>
            Collection of the resources which this resource depends on.
            </returns>
        </member>
        <member name="M:Inedo.Web.ClientResources.VersionMappedClientResource.Inedo#Web#ClientResources#IClientResource#Render(System.Web.UI.HtmlTextWriter,Inedo.Web.ClientResources.ClientResourceManager)">
            <summary>
            Renders the HTML for the resource.
            </summary>
            <param name="writer">HtmlTextWriter used to render the resource.</param>
            <param name="resourceManager">The current resource manager.</param>
        </member>
        <member name="P:Inedo.Web.ClientResources.VersionMappedClientResource.VersionMaps">
            <summary>
            Gets the version maps.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ActionHandlerDirective">
            <summary>
            Indicates the action and arguments to take on click.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ActionHandlerDirective.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ActionHandlerDirective"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ActionHandlerDirective.GetNavigateUrl">
            <summary>
            Returns the URL which corresponds to this directive.
            </summary>
            <returns>The URL which corresponds to this directive.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.ActionHandlerDirective.ActionHandler">
            <summary>
            Gets or sets the action handler.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ActionHandlerDirective.Arguments">
            <summary>
            Gets the query string arguments to pass to the <see cref="P:Inedo.Web.Controls.ActionHandlerDirective.ActionHandler"/>.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.AjaxBlock">
            <summary>
            A span control with content loaded via $.load().
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Element">
            <summary>
            Represents a basic HTML element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty or <paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Element"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null or empty, <paramref name="content"/> is null, or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)">
            <summary>
            When implemented by a class, retrieves the specified attribute property from the server control.
            </summary>
            <param name="key">A <see cref="T:System.String"/> that represents the name of the server control attribute.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Element.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)">
            <summary>
            When implemented by a class, designates an attribute and its value to assign to the ASP.NET server control.
            </summary>
            <param name="key">The name of the attribute to be set.</param>
            <param name="value">The value assigned to the attribute.</param>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.Class">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.InnerText">
            <summary>
            Gets or sets the inner text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.InnerHtml">
            <summary>
            Gets or sets the inner HTML.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Element.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.AjaxBlock.#ctor(Inedo.Web.Handlers.ProcessRequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.AjaxBlock"/> class.
            </summary>
            <param name="processRequestDelegate">The process request delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.AjaxBlock.SetDefaultProperties(System.Action{Inedo.Web.Controls.AjaxBlock})">
            <summary>
            Sets the default properties.
            </summary>
            <param name="setPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.AjaxBlock.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.AjaxBlock.RefreshInterval">
            <summary>
            Gets or sets the refresh interval.
            </summary>
            <remarks>
            When 0 or less, does not refresh.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.AjaxBlock.ShowOriginalContentOnRefresh">
            <summary>
            Gets a value indicating if the original content should be displayed when refreshing.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.AjaxBlock.QueryString">
            <summary>
            Gets or sets the query string for the delegate.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.ActionButtonLink">
            <summary>
            Represents a link that POSTS to an delegate url and partially renders.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.ButtonLink">
            <summary>
            A hyperlink rendered as a styled button.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.A">
            <summary>
            The HTML a element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.A.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.A"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.A.Href">
            <summary>
            Gets or sets the href attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.A.Target">
            <summary>
            Gets or sets the target attribute.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ButtonLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ButtonLinks.ButtonLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ButtonLink.SetDefaultProperties``1(System.Action{``0})">
            <summary>
            Sets the default properties.
            </summary>
            <typeparam name="TButtonLink">The type of the link.</typeparam>
            <param name="setPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ButtonLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ButtonLink.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the rendered content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.ButtonLink.IconDimensions">
            <summary>
            Gets or sets the icon dimensions.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.ButtonLink.Icon">
            <summary>
            Gets or sets the icon to display on the button.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ButtonLinks.ActionButtonLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.UpdateOnClose">
            <summary>
            Gets or sets the partial render directive 
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.ActionHandler">
            <summary>
            Gets or sets the action handler.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.ActionButtonLink.ConfirmationMessage">
            <summary>
            Gets or sets the confirmation message to display to the user before executing the action.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.CloseModalButtonLink">
            <summary>
            A button which will close the current modal dialog.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.CloseModalButtonLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ButtonLinks.CloseModalButtonLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.CloseModalButtonLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.CloseModalButtonLink.TriggerRefresh">
            <summary>
            Gets or sets a value indicating whether the close will trigger a refresh or partial render on close.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.IconConverter">
            <summary>
            Converts a string representation of an Icon (e.g. "BSN.Arrow_down") into an instance of the Icon class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.IconConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.IconConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.IconConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.IconConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink">
            <summary>
            A button which will open a modal dialog.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.ModalWidth">
            <summary>
            Gets or sets the width of the modal.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.ModalHeight">
            <summary>
            Gets or sets the height of the modal.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.UpdateOnClose">
            <summary>
            Gets or sets the partial render directive for the parent page.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.RefreshOnClose">
            <summary>
            Gets or sets a value indicating whether the parent page should refresh when the modal is closed.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.RedirectToOnClose">
            <summary>
            Gets or sets the URL to redirect to when the modal is closed.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.OpenModalButtonLink.Resizable">
            <summary>
            Gets or sets a value indicating whether the modal dialog will be resizable.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink">
            <summary>
            A button which will trigger a postback.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes to render.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            When implemented by a class, enables a server control to process an event raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A <see cref="T:System.String"/> that represents an optional event argument to be passed to the event handler.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the <see cref="E:Command"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation should occur on the postback.
            </summary>
        </member>
        <member name="E:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="E:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.Command">
            <summary>
            Also occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.CommandName">
            <summary>
            Gets or sets the command name.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.CommandArgument">
            <summary>
            Gets or sets the command argument.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.PostBackUrl">
            <summary>
            Gets or sets the postback URL.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ButtonLinks.PostBackButtonLink.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.CExtensions">
            <summary>
            Contains <see cref="T:Control"/>-related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Add(System.Web.UI.ControlCollection,System.Web.UI.Control[])">
            <summary>
            Adds controls to the specified control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="controls">The controls to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddLiteral(System.Web.UI.ControlCollection,System.String)">
            <summary>
            Creates an instance of a <see cref="T:System.Web.UI.LiteralControl"/> containing
            the supplied string.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="literal">Literal to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddLiteral(System.Web.UI.ControlCollection,System.String,System.Object[])">
            <summary>
            Creates an instance of a <see cref="T:System.Web.UI.LiteralControl"/> containing
            a string generated from the supplied format string and arguments.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="literalFormatString">Standard .NET format string.</param>
            <param name="formatArgs">Arguments used within format string.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddHtml(System.Web.UI.ControlCollection,System.String,System.String)">
            <summary>
            Adds an instance of a <see cref="T:System.Web.UI.HtmlGenericControl"/> to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="tagName">The element tag name.</param>
            <param name="innerHtml">The inner HTML of the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddHtmlEncoded(System.Web.UI.ControlCollection,System.String,System.String)">
            <summary>
            Adds an instance of a <see cref="T:System.Web.UI.HtmlGenericControl"/> to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="tagName">The element tag name.</param>
            <param name="innerText">The inner text of the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Add(System.Web.UI.ControlCollection,Inedo.Web.Controls.CExtensions.CreateControl)">
            <summary>
            Adds the control returned by a delegate to a control collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="createControlDelegate">Delegate which returns the control to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddRange(System.Web.UI.ControlCollection,System.Collections.Generic.IEnumerable{System.Web.UI.Control})">
            <summary>
            Adds a collection of controls to another control's collection.
            </summary>
            <param name="toControl">Control collection to add to.</param>
            <param name="controls">The controls to add.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.AddRange(System.Web.UI.WebControls.ListItemCollection,System.Collections.Generic.IEnumerable{System.Web.UI.WebControls.ListItem})">
            <summary>
            Adds the range.
            </summary>
            <param name="collection">The collection.</param>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.Find``1(System.Web.UI.ControlCollection)">
            <summary>
            Returns all of the controls in a control tree that are of the specified type.
            </summary>
            <typeparam name="TControl">The type of the control to find.</typeparam>
            <param name="controls">The control collection to search.</param>
            <returns>The controls of the specified type found in the control tree.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.BindVisibility(System.Web.UI.ControlCollection,System.Web.UI.WebControls.CheckBox,System.Web.UI.Control)">
            <summary>
            Binds the visibility of a control to a <see cref="T:CheckBox"/> control.
            </summary>
            <param name="toControl">Control collection.</param>
            <param name="checkBox"><see cref="T:CheckBox"/> control which will control the visibility of <paramref name="boundControl"/>.</param>
            <param name="boundControl"><see cref="T:Control"/> which will have its visibility toggled by <paramref name="checkBox"/>.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CExtensions.IncludeClientResourceInPage(System.Web.UI.Control,Inedo.Web.ClientResources.IClientResource)">
            <summary>
            Includes the specified client resource in the parent page of a control.
            </summary>
            <param name="control">Control which is contained by a page that implements <see cref="T:Inedo.Web.ClientResources.IClientResourceManagerHost"/>.</param>
            <param name="clientResource">The client resource to add to the page.</param>
            <remarks>
            <paramref name="control"/> must have been added to a page which implements <see cref="T:Inedo.Web.ClientResources.IClientResourceManagerHost"/>.
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.CExtensions.CreateControl">
            <summary>
            Returns a new control.
            </summary>
            <returns>Control to add.</returns>
        </member>
        <member name="T:Inedo.Web.Controls.CodeTextBox">
            <summary>
            A text box control for editing code.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.CodeTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.CodeTextBox"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.CodeTextBox.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback events prior to rendering on the client, if <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack" /> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.CodeTextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.ShowLineNumbers">
            <summary>
            Gets or sets a value indicating whether to show line numbers.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.Mode">
            <summary>
            Gets or sets the code editor mode.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the contents of the <see cref="T:System.Web.UI.WebControls.TextBox" /> control can be changed.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.TextMode">
            <summary>
            Gets the behavior mode (single-line, multiline, or password) of the <see cref="T:System.Web.UI.WebControls.TextBox" /> control.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.Wrap">
            <summary>
            Gets or sets a value indicating whether the text content wraps within a multiline text box.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeTextBox.TagKey">
            <summary>
            Gets the HTML tag for the text box control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.CodeEditorMode">
            <summary>
            Represents a mode for a <see cref="T:Inedo.Web.Controls.CodeTextBox"/> control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.CodeEditorMode.#ctor(System.String,Inedo.Web.ClientResources.IClientResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.CodeEditorMode"/> class.
            </summary>
            <param name="name">The name of the mode.</param>
            <param name="resource">The resource which specifies the mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty or <paramref name="resource"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.CodeEditorMode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Web.Controls.CodeEditorMode.Xml">
            <summary>
            Gets the XML mode.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeEditorMode.PowerShell">
            <summary>
            Gets the PowerShell mode.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeEditorMode.Name">
            <summary>
            Gets the name of the mode.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.CodeEditorMode.Resource">
            <summary>
            Gets the resource for the mode.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ComboSelect">
            <summary>
            A DropDownList that uses jQuery select2 to enable searching for items via textbox.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ComboSelect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ComboSelect"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ComboSelect.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ComboSelect.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds HTML attributes and styles that need to be rendered to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream that renders HTML contents to the client.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ComboSelect.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ComboSelect.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the items in the <see cref="T:System.Web.UI.WebControls.ListControl"/> control.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream used to write content to a Web page.</param>
            <exception cref="T:System.InvalidOperationException">Only one item maybe selected.</exception>
        </member>
        <member name="P:Inedo.Web.Controls.ComboSelect.OptionGroupSeparator">
            <summary>
            Gets or sets the option group separator.
            </summary>
            <remarks>
            When not null or empty, ListItems that contain the separator character will be rendered in their own option group
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.ControlCollection`1">
            <summary>
            Strongly-typed control collection.
            </summary>
            <typeparam name="T">Type of the control.</typeparam>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.#ctor(System.Web.UI.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ControlCollection`1"/> class.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            True if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">Array into which controls are copied.</param>
            <param name="arrayIndex">Index in target array to start writing elements.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            True if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.ControlCollection`1.CreateWeaklyTypedReplacement">
            <summary>
            Returns a new control collection that inherits <see cref="T:System.Web.UI.ControlCollection"/>
            and prevents types other than <typeparamref name="T"/> from being added to the
            collection.
            </summary>
            <returns>New control collection that can replace the original collection on the parent control.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.ControlCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The index of the element.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ControlCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The index of the element.</returns>
        </member>
        <member name="P:Inedo.Web.Controls.ControlCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ControlCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ControlDefaulter">
            <summary>
            Provides automatic initialization of properties to default values for controls.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ControlDefaulter.InitializeControl(System.Web.UI.Control)">
            <summary>
            Initializes a control by setting default property values.
            </summary>
            <param name="control">The control to initialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.ControlDefaulter.SetDefaultProperties``1(System.Action{``0})">
            <summary>
            Adds a default property setter for a control type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="setProperties">Delegate which is invoked to initialize properties on instances of <typeparamref name="TControl"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="setProperties"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.DatePicker">
            <summary>
            A TextBox that drops down a JavaScript-based calendar.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ValidatingTextBox">
            <summary>
            A text box control with extra options for validation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ValidatingTextBox"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.SetDefaultProperties``1(System.Action{``0})">
            <summary>
            Sets the default properties.
            </summary>
            <typeparam name="TTextBox">The type of the text box.</typeparam>
            <param name="setPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.SetValidatorDefaultProperties``1(System.Action{``0})">
            <summary>
            Sets the default properties.
            </summary>
            <typeparam name="TValidator">The type of the text box.</typeparam>
            <param name="setValidatorPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.CreateValidator``1">
            <summary>
            Returns a new validator.
            </summary>
            <typeparam name="TValidator">The type of the validator.</typeparam>
            <returns>New instance of the validator.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds HTML attributes and styles that need to be rendered to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> instance.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ValidatingTextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="E:Inedo.Web.Controls.ValidatingTextBox.ServerValidate">
            <summary>
            When set, attaches a <see cref="T:StyledCustomValidator"/> with the event.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidatorText">
            <summary>
            Gets or sets the text of the validators that are created.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidatorDisplay">
            <summary>
            Gets or sets the display of the validators that are created.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.Required">
            <summary>
            Gets or sets whether the textbox is required.
            </summary>
            <remarks>
            If required, a <see cref="T:StyledRequiredFieldValidator"/> will be created.
            </remarks>        
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.ValidationExpression">
            <summary>
            Gets or sets whether the textbox has a validation expression.
            </summary>
            <remarks>
            If required, a <see cref="T:StyledRegularExpressionValidator"/> will be created.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.Type">
            <summary>
            Gets or sets the textbox's <see cref="T:System.Web.UI.WebControls.ValidationDataType"/>.
            </summary>
            <remarks>
            If other than <see cref="F:System.Web.UI.WebControls.ValidationDataType.String"/>, a <see cref="T:System.Web.UI.WebControls.RangeValidator"/>
            will be created and client script added.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Controls.ValidatingTextBox.AutoCompleteValues">
            <summary>
            Gets or sets auto-complete values for the textbox.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.DatePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.DatePicker"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.DatePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.DatePicker.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback events prior to rendering on the client, if <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack" /> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.DatePicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.DateFormat">
            <summary>
            Gets or sets the .NET date format to use.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.Value">
            <summary>
            Gets or sets the current value of the textbox.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.DatePicker.Text">
            <summary>
            Gets the text.
            </summary>
            <remarks>
            This is just here to hide the text property.
            </remarks>
        </member>
        <member name="T:Inedo.Web.Controls.JQueryMethodWithArgs">
            <summary>
            Writes a client-side script to invoke a jquery-style method on
            a specified element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JQueryMethodWithArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.JQueryMethodWithArgs"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JQueryMethodWithArgs.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.Target">
            <summary>
            Gets or sets the element on which the method will be invoked.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.JQueryMethod">
            <summary>
            Gets or sets the jquery method to invoke.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.JQueryMethodWithArgs.MethodArgs">
            <summary>
            Gets or sets an object that will be json-formatted as the method's arguments.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ModalHyperLink">
            <summary>
            Wraps inedojq_frameddialog to load content in an IFrame
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ImageTextHyperLink">
            <summary>
            Represents a <see cref="T:System.Web.UI.WebControls.HyperLink"/> that can display an image and text.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ImageTextHyperLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ImageTextHyperLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ImageTextHyperLink.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Displays the <see cref="T:System.Web.UI.WebControls.HyperLink"/> control on a page.
            </summary>
            <param name="writer">The output stream to render on the client.</param>
        </member>
        <member name="P:Inedo.Web.Controls.ImageTextHyperLink.AlternateText">
            <summary>
            Gets or sets the image's alt text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ImageTextHyperLink.ImageLocation">
            <summary>
            Gets or sets the image location; default is <see cref="F:Inedo.Web.Controls.ImageTextHyperLink.ImageLocations.NoText"/>.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ImageTextHyperLink.OnClientClick">
            <summary>
            Gets or sets the onclick attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ImageTextHyperLink.RedirectParentPage">
            <summary>
            Gets or sets a value indicating whether to redirect the parent page. This should typically 
            be set to true when the hyperlink is rendered inside a modal window. Setting this value
            to true will override any value for the OnClientClick property.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.ImageTextHyperLink.ImageLocations">
            <summary>
            Indicates how images are displayed.
            </summary>
        </member>
        <member name="F:Inedo.Web.Controls.ImageTextHyperLink.ImageLocations.NoText">
            <summary>
            Indicates that the image is displayed without text.
            </summary>
        </member>
        <member name="F:Inedo.Web.Controls.ImageTextHyperLink.ImageLocations.LeftWithText">
            <summary>
            Indicates that the image is displayed to the left of the text.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ModalHyperLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.ModalHyperLink"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.ModalHyperLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the attributes of a <see cref="T:System.Web.UI.WebControls.HyperLink"/> control to the output stream for rendering.
            </summary>
            <param name="writer">The output stream to render on the client.</param>
        </member>
        <member name="M:Inedo.Web.Controls.ModalHyperLink.BuildOnClickAttribute(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Inedo.Web.Controls.PartialRenderDirective)">
            <summary>
            Builds the on click attribute.
            </summary>
            <param name="href">The href.</param>
            <param name="modalWidth">Width of the modal.</param>
            <param name="modalHeight">Height of the modal.</param>
            <param name="resizable">The resizable.</param>
            <param name="refreshOnClose">The refresh on close.</param>
            <param name="redirectToOnClose">The redirect to on close.</param>
            <param name="updateOnClose">The update on close.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="href"/> is null or empty.</exception>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.ModalWidth">
            <summary>
            Gets or sets the minimum width of the modal.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.ModalHeight">
            <summary>
            Gets or sets the minimum height of the modal.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.Resizable">
            <summary>
            Gets or sets a value indicating whether the modal will be resizable.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.RefreshOnClose">
            <summary>
            Gets or sets a value indicating whether the page will refresh upon modal close
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.RedirectToOnClose">
            <summary>
            Gets or sets the redirect url of the page on close.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.ModalHyperLink.UpdateOnClose">
            <summary>
            Gets or sets the partial reload.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.B">
            <summary>
            The HTML b element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.B.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.B"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.ElementAttribute">
            <summary>
            Represents an attribute on an HTML element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.ElementAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.ElementAttribute"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.ElementAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.ElementAttribute.Name">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.ElementAttribute.Value">
            <summary>
            Gets the value of the attribute.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.I">
            <summary>
            The HTML i element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.I.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.I"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Link">
            <summary>
            The HTML link element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Link"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Rel">
            <summary>
            Gets or sets the rel.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Href">
            <summary>
            Gets or sets the href.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Type">
            <summary>
            Gets or sets the href.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Media">
            <summary>
            Gets or sets the media.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.InnerText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.InnerHtml">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Link.Controls">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.ListElement`1">
            <summary>
            Abstract base for list-style elements.
            </summary>
            <typeparam name="T">Type of the list element.</typeparam>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.ListElement`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.ListElement`1"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.ListElement`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.ListElement`1"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="listItems">The list items.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Pre">
            <summary>
            The HTML pre element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Pre.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Pre"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Span">
            <summary>
            The HTML span element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Span.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Span"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableCell">
            <summary>
            The cell for the standard Inedo styled table control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableCell.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableCell"/> class.
            </summary>
            <param name="content">The contents.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableHeaderCell">
            <summary>
            The header cell for the standard Inedo styled table control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderCell.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderCell"/> class.
            </summary>
            <param name="content">The contents.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableHeaderRow">
            <summary>
            The header row for the standard Inedo styled table control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.StyledTableHeaderCell})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor(Inedo.Web.Controls.StyledTableHeaderCell[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableHeaderRow"/> class.
            </summary>
            <param name="cells">The cells to add to the row.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cells"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableHeaderRow.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTableRow">
            <summary>
            The row for the standard Inedo styled table control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.StyledTableCell})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor(Inedo.Web.Controls.StyledTableCell[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
            <param name="cells">The cells.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTableRow"/> class.
            </summary>
            <param name="cells">The cells to add to the row.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cells"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTableRow.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="T:Inedo.Web.Controls.TableExtensions">
            <summary>
            Extension methods to make building tables easier
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddHeaderRow``1(``0)">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableHeaderRow"/> to <see cref="P:Rows"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table">The table.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddHeaderCell``1(``0,System.Web.UI.Control[])">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableHeaderCell"/> with the specified contents to the last row in <see cref="P:Rows"/>.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <param name="contents">Contents of the cell.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddHeaderCell``1(``0,System.String)">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableHeaderCell"/> with the specified text to the last row in <see cref="P:Rows"/>.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <param name="cellText">Contents of the cell. This will be HTML-encoded.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddRow``1(``0)">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableRow"/> to <see cref="P:Rows"/>.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddCell``1(``0,System.Web.UI.Control[])">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableCell"/> with the specified contents to the last row in <see cref="P:Rows"/>.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <param name="contents">Contents of the cell.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.AddCell``1(``0,System.String)">
            <summary>
            Adds a <see cref="T:System.Web.UI.WebControls.TableCell"/> with the specified text to the last row in <see cref="P:Rows"/>.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <param name="cellText">Contents of the cell. This will be HTML-encoded.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.GetLastCell``1(``0)">
            <summary>
            Gets the last <see cref="T:System.Web.UI.WebControls.TableCell"/> in the last row or null.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.GetLastRow``1(``0)">
            <summary>
            Gets the last <see cref="T:System.Web.UI.WebControls.TableRow"/> or null.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.EditLastCell``1(``0,System.Action{System.Web.UI.WebControls.TableCell})">
            <summary>
            Edits the last cell.
            </summary>
            <typeparam name="TTable"></typeparam>
            <param name="table">The table.</param>
            <param name="editLastCellMethod">The edit last cell method.</param>
            <returns>
            Instance this method was called on.
            </returns>
            <remarks>
            Intended as a chainable method.
            </remarks>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.NewTableCell(System.Web.UI.WebControls.Table,System.Web.UI.Control[])">
            <summary>
            Returns a <see cref="T:System.Web.UI.WebControls.TableCell"/> with the specified contents.
            </summary>
            <param name="table">The table.</param>
            <param name="contents">Controls to add to the cell.</param>
            <returns>
            Instance of a <see cref="T:System.Web.UI.WebControls.TableCell"/>.
            </returns>
        </member>
        <member name="M:Inedo.Web.Controls.TableExtensions.NewTableCell(System.Web.UI.WebControls.Table,System.Boolean,System.Web.UI.Control[])">
            <summary>
            Depending on input, returns a <see cref="T:System.Web.UI.WebControls.TableCell"/> or <see cref="T:System.Web.UI.WebControls.TableHeaderCell"/> with the specified contents.
            </summary>
            <param name="table">The table.</param>
            <param name="header">When true, creates a <see cref="T:System.Web.UI.WebControls.TableHeaderCell"/> instead of a <see cref="T:System.Web.UI.WebControls.TableCell"/>.</param>
            <param name="contents">Controls to add to the cell.</param>
            <returns>
            Instance of a <see cref="T:System.Web.UI.WebControls.TableCell"/>.
            </returns>
        </member>
        <member name="T:Inedo.Web.Controls.TextBoxExtensions">
            <summary>
            Contains extensions methods for the <see cref="T:System.Web.UI.WebControls.TextBox"/> control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TextBoxExtensions.SetDefaulterText(System.Web.UI.WebControls.TextBox)">
            <summary>
            Sets the default text in the text box to "default."
            </summary>
            <param name="textBox">The text box.</param>
        </member>
        <member name="M:Inedo.Web.Controls.TextBoxExtensions.SetDefaulterText(System.Web.UI.WebControls.TextBox,System.String)">
            <summary>
            Sets the default text in the text box.
            </summary>
            <param name="textBox">The text box.</param>
            <param name="defaultText">The default text.</param>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.FormField">
            <summary>
            Represents a field with a label.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.FormField"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormField.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.FormFieldGroup">
            <summary>
            Represents a group of form fields.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormFieldGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.FormFieldGroup"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormFieldGroup.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldGroup.FormFieldSets">
            <summary>
            Gets the collection of <see cref="T:FormFieldSet"/> instances in the group.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.FormFieldSet">
            <summary>
            Represents a form field set.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormFieldSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.FormFieldSet"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldSet.Description">
            <summary>
            Gets or sets the form field set description.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldSet.FormFields">
            <summary>
            Gets the collection of <see cref="T:FormField"/> instances in the set.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.FormFieldSetDescription">
            <summary>
            Represents a description on a form field set.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormFieldSetDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.FormFieldSetDescription"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.FormFieldSetDescription.CreateControlCollection">
            <summary>
            Creates a new <see cref="T:System.Web.UI.ControlCollection"/> object to hold the child controls (both literal and server) of the server control.
            </summary>
            <returns>
            A <see cref="T:System.Web.UI.ControlCollection"/> object to contain the current server control's child server controls.
            </returns>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldSetDescription.Heading">
            <summary>
            Gets or sets the heading of the description.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldSetDescription.Text">
            <summary>
            Gets or sets the HTML-encoded description text.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.FormFields.FormFieldSetDescription.Html">
            <summary>
            Gets or sets the HTML content of the description text.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.StyledFormField">
            <summary>
            Represents a form field that renders a label.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.StyledFormField"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledFormField.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.StyledFormFieldSet">
            <summary>
            Represents a form field set that renders a label.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledFormFieldSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.StyledFormFieldSet"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledFormFieldSet.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.FormFields.StyledTwoColumnFormFieldSet">
            <summary>
            Represents a two-column form field set.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledTwoColumnFormFieldSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.FormFields.StyledTwoColumnFormFieldSet"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.FormFields.StyledTwoColumnFormFieldSet.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.HtmlEncodedLiteral">
            <summary>
            Represents a <see cref="T:LiteralControl"/> whose output is HTML-encoded.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlEncodedLiteral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.HtmlEncodedLiteral"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlEncodedLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.HtmlEncodedLiteral"/> class.
            </summary>
            <param name="text">The text to be rendered on the requested Web page.</param>
        </member>
        <member name="M:Inedo.Web.Controls.HtmlEncodedLiteral.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the content of the <see cref="T:System.Web.UI.LiteralControl"/> object to the ASP.NET page.
            </summary>
            <param name="output">An <see cref="T:System.Web.UI.HtmlTextWriter"/> that renders the content of the <see cref="T:System.Web.UI.LiteralControl"/> to the requesting client.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Ol">
            <summary>
            The HTML ol element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.SimpleHtml.Li})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ol.#ctor(Inedo.Web.Controls.SimpleHtml.Li[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Li">
            <summary>
            The HTML li element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Li.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Li"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H6">
            <summary>
            The HTML h6 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H6.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H6"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H3">
            <summary>
            The HTML h3 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H3.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H3"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H4">
            <summary>
            The HTML h4 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H4.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H4"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H5">
            <summary>
            The HTML h5 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H5.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H5"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H1">
            <summary>
            The HTML h1 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H1"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Div">
            <summary>
            The HTML div element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Div.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Div"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.IconImage">
            <summary>
            Represents an icon in the Inedo icon library.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.IconImage.GetIconImageUrl(Inedo.Icons.Icon,Inedo.Icons.IconDimensions)">
            <summary>
            Returns a URL to the icon.
            </summary>
            <param name="icon">The icon.</param>
            <param name="dimensions">The icon dimensions.</param>
            <returns>URL to the icon.</returns>
        </member>
        <member name="M:Inedo.Web.Controls.IconImage.ProcessImageRequest(System.Web.HttpContext)">
            <summary>
            Processes the image request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Inedo.Web.Controls.IconImage.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.IconImage.IconDimensions">
            <summary>
            Gets or sets the icon dimensions.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.IconImage.ImageUrl">
            <summary>
            Gets the location of an image to display in the <see cref="T:System.Web.UI.WebControls.Image"/> control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.JavascriptBlock">
            <summary>
            Renders a block of JavaScript in a script element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JavascriptBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.JavascriptBlock"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.JavascriptBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.JavascriptBlock"/> class.
            </summary>
            <param name="scriptText">The script text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.JavascriptBlock.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.JavascriptBlock.ScriptText">
            <summary>
            Gets or sets the script text.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.PageBase">
            <summary>
            The base class for an InedoLib page.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PageBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.PageBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PageBase.AddContentTemplate(System.String,System.Web.UI.Control)">
            <summary>
            Called during page initialization to create a collection of content (from content controls) that is handed to a master page, if the current page or master page refers to a master page.
            </summary>
            <param name="templateName">The name of the content template to add.</param>
            <param name="templateControl">The content template.</param>
        </member>
        <member name="T:Inedo.Web.Controls.PartialRenderDirective">
            <summary>
            Describes the portion of a page that should be re-rendered.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PartialRenderDirective.GetSelector">
            <summary>
            Returns the jQuery selector based on the <see cref="P:Target"/> property.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PartialRenderDirective.op_Implicit(System.Web.UI.Control)~Inedo.Web.Controls.PartialRenderDirective">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Web.UI.Control"/> to <see cref="T:Inedo.Web.Controls.PartialRenderDirective"/>.
            </summary>
            <param name="target">The target.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Inedo.Web.Controls.PartialRenderDirective.Target">
            <summary>
            Gets or sets the target control to replace.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.PartialRenderDirective.Data">
            <summary>
            Gets or sets additional data sent to the server.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.PasswordTextBox">
            <summary>
            A text box that allows its contents to be masked.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.PasswordTextBox"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds HTML attributes and styles that need to be rendered to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> instance.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Inedo.Web.Controls.PasswordTextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Inedo.Web.Controls.PasswordTextBox.TextMode">
            <summary>
            Gets the behavior mode (single-line, multiline, or password) of the <see cref="T:System.Web.UI.WebControls.TextBox"/> control.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.RenderDelegator">
            <summary>
            Control which invokes a delegate in its <see cref="M:Inedo.Web.Controls.RenderDelegator.Render(System.Web.UI.HtmlTextWriter)"/> method.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.#ctor(Inedo.Web.Controls.RenderDelegator.RenderHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.RenderDelegator.RenderHandler">
            <summary>
            Delegate which renders text to a <see cref="T:System.Web.UI.HtmlTextWriter"/>.
            </summary>
            <param name="writer">The HTML text writer.</param>
        </member>
        <member name="T:Inedo.Web.Controls.RenderClientScriptDelegator">
            <summary>
            Renders a block of Javascript in a script element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderClientScriptDelegator.#ctor(Inedo.Web.Controls.RenderDelegator.RenderHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderClientScriptDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderClientScriptDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.RenderJQueryDocReadyDelegator">
            <summary>
            Renders a jQuery document ready function in a script element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.#ctor(Inedo.Web.Controls.RenderDelegator.RenderHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.RenderJQueryDocReadyDelegator"/> class.
            </summary>
            <param name="renderHandler">The delegate to invoke.</param>
        </member>
        <member name="M:Inedo.Web.Controls.RenderJQueryDocReadyDelegator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.H2">
            <summary>
            The HTML h2 element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.H2.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.H2"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Img">
            <summary>
            The HTML img element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Img.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Img"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Src">
            <summary>
            Gets or sets the src attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Alt">
            <summary>
            Gets or sets the alt attribute.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.InnerText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.InnerHtml">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.SimpleHtml.Img.Controls">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.P">
            <summary>
            The HTML p element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null.</exception>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.P.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.P"/> class.
            </summary>
            <param name="content">Content to add to the element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is null or one of the values in <paramref name="content"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Controls.SimpleHtml.Ul">
            <summary>
            The HTML ul element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Controls.SimpleHtml.Li})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ol"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="M:Inedo.Web.Controls.SimpleHtml.Ul.#ctor(Inedo.Web.Controls.SimpleHtml.Li[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.SimpleHtml.Ul"/> class.
            </summary>
            <param name="listItems">The list items.</param>
        </member>
        <member name="T:Inedo.Web.Controls.StyleBlock">
            <summary>
            An HTML style element.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyleBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyleBlock"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyleBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyleBlock"/> class.
            </summary>
            <param name="styleText">The style text.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyleBlock.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the server control content.</param>
        </member>
        <member name="P:Inedo.Web.Controls.StyleBlock.StyleText">
            <summary>
            Gets or sets the style text.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.StyledTable">
            <summary>
            The standard Inedo styled table control.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor(System.Collections.Generic.IEnumerable{System.Web.UI.WebControls.TableRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.#ctor(System.Web.UI.WebControls.TableRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.StyledTable"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Inedo.Web.Controls.StyledTable.SetDefaultProperties``1(System.Action{``0})">
            <summary>
            Sets the default properties.
            </summary>
            <typeparam name="TStyledTable">The type of the text box.</typeparam>
            <param name="setPropertiesDelegate">The set properties delegate.</param>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTable.LastCell">
            <summary>
            Gets the last <see cref="T:System.Web.UI.WebControls.TableCell"/> in the last row or null.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.StyledTable.LastRow">
            <summary>
            Gets the last <see cref="T:System.Web.UI.WebControls.TableRow"/> or null.
            </summary>
        </member>
        <member name="T:Inedo.Web.Controls.TimePicker">
            <summary>
            A text box using jquery_timepicker to facilitate time entry.
            </summary>    
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Controls.TimePicker"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback events prior to rendering on the client, if <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack" /> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Inedo.Web.Controls.TimePicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Inedo.Web.Controls.TimePicker.TimeFormat">
            <summary>
            Gets or sets the .NET time format string.
            </summary>
        </member>
        <member name="P:Inedo.Web.Controls.TimePicker.TimeFromMidnight">
            <summary>
            Gets or sets the amount of time that has passed since midnight.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.ClientResourceHandler">
            <summary>
            A handler for server static files that may be contained in an embedded resource.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.StaticHandler">
            <summary>
            A handler for serving static files.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.Handler">
            <summary>
            Base class for Inedo HTTP handlers.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.Handler"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables a factory to reuse an existing handler instance.
            </summary>
            <param name="handler">The <see cref="T:System.Web.IHttpHandler"/> object to reuse.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.Wrap(System.Web.IHttpHandler)">
            <summary>
            Wraps the specified HTTP handler.
            </summary>
            <param name="httpHandler">The HTTP handler.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.Wrap(System.Web.IHttpHandlerFactory)">
            <summary>
            Wraps the specified HTTP handler factory.
            </summary>
            <param name="httpHandlerFactory">The HTTP handler factory.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.Wrap(System.Type)">
            <summary>
            Wraps the specified handler type.
            </summary>
            <param name="handlerType">Type of the handler.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.Web.Handlers.Handler.ToHttpHandlerFactory">
            <summary>
            Returns an <see cref="T:System.Web.IHttpHandlerFactory"/> for the current instance.
            </summary>
            <returns><see cref="T:System.Web.IHttpHandlerFactory"/> for the current instance.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.StaticHandler"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.StaticHandler"/> class.
            </summary>
            <param name="physicalPath">The physical path.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.#ctor(Inedo.Web.Handlers.SearchDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.StaticHandler"/> class.
            </summary>
            <param name="searchDelegate">The search delegate.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.ProcessRequest(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Attempts to locate the request static resource.
            </summary>
            <param name="args">The args.</param>
            <returns>True if the static resource was located and served; otherwise false.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.StaticHandler.WriteHeaders(System.Web.HttpResponse,System.String,System.DateTime)">
            <summary>
            Writes standard response headers for a static resource.
            </summary>
            <param name="response">The response.</param>
            <param name="fileName">The file name.</param>
            <param name="lastModified">The last modified date of the resource.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ClientResourceHandler"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ClientResourceHandler"/> class.
            </summary>
            <param name="resourcePath">The resource path.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ClientResourceHandler"/> class.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <param name="resourcePath">The resource path.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.#ctor(System.String,Inedo.Web.Handlers.SearchDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ClientResourceHandler"/> class.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <param name="getResourcePath">The get resource path.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.#ctor(Inedo.Web.Handlers.SearchDelegate,Inedo.Web.Handlers.SearchDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ClientResourceHandler"/> class.
            </summary>
            <param name="getPhysicalPath">The get physical path.</param>
            <param name="getResourcePath">The get resource path.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ClientResourceHandler.ProcessRequest(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Attempts to locate the request static resource.
            </summary>
            <param name="args">The args.</param>
            <returns>
            True if the static resource was located and served; otherwise false.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.ConditionalHandler">
            <summary>
            Handler which conditionally returns another handler based on the return value of a delegate.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.ConditionalHandler.#ctor(Inedo.Web.Handlers.CanGetHandlerDelegate,Inedo.Web.Handlers.Handler)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ConditionalHandler"/> class.
            </summary>
            <param name="canGetHandlerDelegate">The delegate invoked to determine if the handler should be used.</param>
            <param name="handler">The handler to return if the delegate returns true.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.ConditionalHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.DefaultAspNetHandler">
            <summary>
            Handler which provides default ASP.NET behavior.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DefaultAspNetHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DefaultAspNetHandler"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DefaultAspNetHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes">
            <summary>
            A helper class which provides access to internal types from System.Web.
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.HttpForbiddenHandlerType">
            <summary>
            Type for <see cref="T:System.Web.HttpForbiddenHandler"/>
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.HttpNotFoundHandlerType">
            <summary>
            Type for <see cref="T:System.Web.HttpNotFoundHandler"/>
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.ScriptHandlerFactoryType">
            <summary>
            Type for <see cref="T:System.Web.Script.Services.ScriptHandlerFactory"/>
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.SimpleHandlerFactoryType">
            <summary>
            Type for <see cref="T:System.Web.UI.SimpleHandlerFactory"/>
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.HttpMethodNotAllowedHandler">
            <summary>
            Type for <see cref="T:System.Web.HttpMethodNotAllowedHandler"/>
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.DefaultAspNetHandler.SystemHandlerTypes.StaticFileHandler">
            <summary>
            Type for <see cref="T:System.Web.StaticFileHandler"/>
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.ProcessRequestDelegate">
            <summary>
            Represents the method that processes an HTTP request.
            </summary>
            <param name="context">The information about the HTTP request and response.</param>
        </member>
        <member name="T:Inedo.Web.Handlers.GetHandlerDelegate">
            <summary>
            Represents the method that returns the appropriate <see cref="T:System.Web.IHttpHandler"/> for a request.
            </summary>
            <param name="args">Context information about the request.</param>
            <returns><see cref="T:System.Web.IHttpHandler"/> to use for the request or null if no handler is available.</returns>
        </member>
        <member name="T:Inedo.Web.Handlers.CanGetHandlerDelegate">
            <summary>
            Represents the method that determines whether a handler can be used to service a request.
            </summary>
            <param name="args">Context information about the request.</param>
            <returns>Value indicating whether a handler can be used to service the request.</returns>
        </member>
        <member name="T:Inedo.Web.Handlers.SearchDelegate">
            <summary>
            Represents the method that returns the physical path of a requested resource.
            </summary>
            <param name="args">Context information about the request.</param>
            <returns>Physical path of the requested resource.</returns>
        </member>
        <member name="T:Inedo.Web.Handlers.DelegatingHandler">
            <summary>
            Represents a <see cref="T:Inedo.Web.Handlers.Handler"/> that delegates either the creation of a <see cref="T:System.Web.IHttpHandler"/> 
            or the processing of a <see cref="T:Inedo.Web.Handlers.DelegatingHttpHandler"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHandler.#ctor(Inedo.Web.Handlers.GetHandlerDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DelegatingHandler"/> class.
            </summary>
            <param name="getHandlerDelegate">Delegate which returns the handler to use.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHandler.#ctor(Inedo.Web.Handlers.ProcessRequestDelegate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DelegatingHandler"/> class.
            </summary>
            <param name="processRequestDelegate">Delegate which processes a request.</param>
            <param name="isReusable">Value indicating whether the handler is reusable.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.DelegatingHttpHandler">
            <summary>
            Delegates processing to a <see cref="T:Inedo.Web.Handlers.ProcessRequestDelegate"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandler.#ctor(Inedo.Web.Handlers.ProcessRequestDelegate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DelegatingHttpHandler"/> class.
            </summary>
            <param name="processRequestDelegate">Delegate which processes a request.</param>
            <param name="isReusable">Value indicating whether the handler is reusable.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandler.#ctor(Inedo.Web.Handlers.ProcessRequestDelegate,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DelegatingHttpHandler"/> class.
            </summary>
            <param name="processRequestDelegate">Delegate which processes a request.</param>
            <param name="isReusable">Value indicating whether the handler is reusable.</param>
            <param name="licenseRequired">Value indicating whether a valid license is required to process the request.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.DelegatingHttpHandler.Delegate">
            <summary>
            Gets the delegate passed to the constructor
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.DelegatingHttpHandler.System#Web#IHttpHandler#IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="P:Inedo.Web.Handlers.DelegatingHttpHandler.LicenseRequired">
            <summary>
            Gets a value indicating whether a valid license is required to process the request.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.DelegatingHttpHandlerFactory">
            <summary>
            <see cref="T:System.Web.IHttpHandlerFactory"/> implementation which uses a delegate to create a handler.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandlerFactory.#ctor(Inedo.Web.Handlers.GetHandlerDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.DelegatingHttpHandlerFactory"/> class.
            </summary>
            <param name="getHandler">Delegate which returns the handler.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandlerFactory.System#Web#IHttpHandlerFactory#GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An instance of the <see cref="T:System.Web.HttpContext"/> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="requestType">The HTTP data transfer method (GET or POST) that the client uses.</param>
            <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl"/> of the requested resource.</param>
            <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath"/> to the requested resource.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.DelegatingHttpHandlerFactory.System#Web#IHttpHandlerFactory#ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables a factory to reuse an existing handler instance.
            </summary>
            <param name="handler">The <see cref="T:System.Web.IHttpHandler"/> object to reuse.</param>
        </member>
        <member name="T:Inedo.Web.Handlers.DynamicHttpHandling">
            <summary>
            Provides methods and properties for controlling dynamic HTTP handling.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.GetProcessRequestDelegateUrl(Inedo.Web.Handlers.ProcessRequestDelegate)">
            <summary>
            Returns the URL for a delegate.
            </summary>
            <param name="del">The process request delegate.</param>
            <returns>URL for the specified delegate.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.IsProcessRequestDelegatedRequest(System.Web.HttpContext)">
            <summary>
            Returns a value indicating whether the current request is for a dynamic delegate.
            </summary>
            <param name="ctx">The current HTTP context.</param>
            <returns>Value indicating whether the request is for a dynamic delegate.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.AddHandler(Inedo.Web.Handlers.Handler)">
            <summary>
            Adds a handler to the mapping rules.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.AddHandler(Inedo.Web.Handlers.GetHandlerDelegate)">
            <summary>
            Adds a handler to the mapping rules.
            </summary>
            <param name="handlerDelegate">The delegate which is invoked to return a handler.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.AddHandler(Inedo.Web.Handlers.Mapping.IHandlerMappingRule,Inedo.Web.Handlers.Handler)">
            <summary>
            Adds a handler to the mapping rules.
            </summary>
            <param name="rule">The mapping rule which determines when the handler is used.</param>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.AddHandler(Inedo.Web.Handlers.CanGetHandlerDelegate,Inedo.Web.Handlers.Handler)">
            <summary>
            Adds a handler to the mapping rules.
            </summary>
            <param name="ruleDelegate">The delegate which is invoked to determine if a handler should be used.</param>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.AddHandler(Inedo.Web.Handlers.CanGetHandlerDelegate,Inedo.Web.Handlers.GetHandlerDelegate)">
            <summary>
            Adds a handler to the mapping rules.
            </summary>
            <param name="ruleDelegate">The delegate which is invoked to determine if a handler should be used.</param>
            <param name="handlerDelegate">The delegate which is invoked to return a handler.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.System#Web#IHttpHandlerFactory#GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An instance of the <see cref="T:System.Web.HttpContext"/> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="requestType">The HTTP data transfer method (GET or POST) that the client uses.</param>
            <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl"/> of the requested resource.</param>
            <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath"/> to the requested resource.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicHttpHandling.System#Web#IHttpHandlerFactory#ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables a factory to reuse an existing handler instance.
            </summary>
            <param name="handler">The <see cref="T:System.Web.IHttpHandler"/> object to reuse.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.DynamicHttpHandling.UseDefaultAspNetHandlers">
            <summary>
            Gets or sets a value indicating whether ASP.NET's default handlers should be used.
            </summary>
        </member>
        <member name="E:Inedo.Web.Handlers.DynamicHttpHandling.BeforeGetHandler">
            <summary>
            Occurs before a handler is found.
            </summary>
        </member>
        <member name="E:Inedo.Web.Handlers.DynamicHttpHandling.AfterGetHandler">
            <summary>
            Occurs when a handler is found.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicDelegateHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Web.Handlers.DynamicDelegateHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.DynamicDelegateHandler.GetDelegateUrl(Inedo.Web.Handlers.ProcessRequestDelegate)">
            <summary>
            Gets a URL that will execute the ProcessRequestDelegate
            </summary>
            <param name="del">The delegate that a URL will be generated for.</param>
            <returns>A URL</returns>
        </member>
        <member name="T:Inedo.Web.Handlers.GetHandlerEventArgs">
            <summary>
            Contains information for handler-related events.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.GetHandlerEventArgs.#ctor(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.GetHandlerEventArgs"/> class.
            </summary>
            <param name="handlerParams">The handler parameters.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerEventArgs.Params">
            <summary>
            Gets the handler parameters.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerEventArgs.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerEventArgs.HttpHandler">
            <summary>
            Gets or sets the HTTP handler.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.GetHandlerParams">
            <summary>
            Contains the arguments for <see cref="M:System.Web.IHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.GetHandlerParams.#ctor(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.GetHandlerParams"/> class.
            </summary>
            <param name="context">An instance of the <see cref="T:System.Web.HttpContext"/> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="requestType">The HTTP data transfer method (GET or POST) that the client uses.</param>
            <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl"/> of the requested resource.</param>
            <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath"/> to the requested resource.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerParams.Context">
            <summary>
            Gets the current HTTP context.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerParams.RequestType">
            <summary>
            Gets the type of the request.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerParams.Url">
            <summary>
            Gets the URL of the request.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.GetHandlerParams.PathTranslated">
            <summary>
            Gets the translated physical path for the request.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.HandlerList">
            <summary>
            Contains a list of handlers.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.MulticastHandler">
            <summary>
            Represents a <see cref="T:Inedo.Web.Handlers.Handler"/> with multiple handlers that each execute in succession.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.MulticastHandler.GetHandlersEnumerator(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns all of the handlers that currently apply.
            </summary>
            <param name="args">Additional information about the context used for filtering handlers.</param>
            <returns>Handlers that meet the current criteria.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.MulticastHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.HandlerList"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.#ctor(System.Collections.Generic.IEnumerable{Inedo.Web.Handlers.Handler})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.HandlerList"/> class.
            </summary>
            <param name="handlers">Handlers to add to the list.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.#ctor(Inedo.Web.Handlers.Handler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.HandlerList"/> class.
            </summary>
            <param name="handlers">Handlers to add to the list.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.AddHandler(Inedo.Web.Handlers.Handler)">
            <summary>
            Adds a handler to the list.
            </summary>
            <param name="handler">Handler to add to the list.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.RemoveHandler(Inedo.Web.Handlers.Handler)">
            <summary>
            Removes a handler from the list.
            </summary>
            <param name="handler">The handler to remove.</param>
            <returns>Value indicating whether the handler was originally in the list.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.HandlerList.GetHandlersEnumerator(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns all of the handlers that currently apply.
            </summary>
            <param name="args">Additional information about the context used for filtering handlers.</param>
            <returns>
            Handlers that meet the current criteria.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.HttpResponseExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Web.HttpResponse"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.HttpResponseExtensions.TransmitStream(System.Web.HttpResponse,System.IO.Stream,System.String)">
            <summary>
            Copies data from a stream to the response without buffering the entire stream in memory.
            </summary>
            <param name="response"><see cref="T:System.Web.HttpResponse"/> to copy the stream to.</param>
            <param name="stream">Data to copy to the response.</param>
            <param name="fileName">Name of the file to include in the response.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.HttpResponseExtensions.TransmitStream(System.Web.HttpResponse,System.IO.Stream,System.String,System.String)">
            <summary>
            Copies data from a stream to the response without buffering the entire stream in memory.
            </summary>
            <param name="response"><see cref="T:System.Web.HttpResponse"/> to copy the stream to.</param>
            <param name="stream">Data to copy to the response.</param>
            <param name="fileName">Name of the file to include in the response.</param>
            <param name="contentType">Content type of the response data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="response"/> is null or <paramref name="stream"/> is null.</exception>
        </member>
        <member name="T:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule">
            <summary>
            Simple matching rule which matches anything.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.Mapping.IHandlerMappingRule">
            <summary>
            Describes a mapping rule used to determine whether a handler should be used.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.IHandlerMappingRule.CanGetHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns a value indicating whether the handler should be used.
            </summary>
            <param name="args">The arguments supplied to the handler.</param>
            <returns>Value indicating whether the handler should be used.</returns>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule"/> class from being created.
            </summary>
        </member>
        <member name="F:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule.Instance">
            <summary>
            The instance of the <see cref="T:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.AlwaysExecuteMappingRule.Inedo#Web#Handlers#Mapping#IHandlerMappingRule#CanGetHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns a value indicating whether the handler should be used.
            </summary>
            <param name="args">The arguments supplied to the handler.</param>
            <returns>
            Value indicating whether the handler should be used.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.Mapping.DelegatingMappingRule">
            <summary>
            Simple matching rule which invokes an arbitrary delegate.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.DelegatingMappingRule.#ctor(Inedo.Web.Handlers.CanGetHandlerDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.Mapping.DelegatingMappingRule"/> class.
            </summary>
            <param name="canGetHandlerDelegate">Delegate invoked to determine if the handler should be used.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.DelegatingMappingRule.Inedo#Web#Handlers#Mapping#IHandlerMappingRule#CanGetHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns a value indicating whether the handler should be used.
            </summary>
            <param name="args">The arguments supplied to the handler.</param>
            <returns>
            Value indicating whether the handler should be used.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.Mapping.ExtensionMappingRule">
            <summary>
            A <see cref="T:Inedo.Web.Handlers.Mapping.IHandlerMappingRule"/> that evaluates when a URL has a specified file extension.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.ExtensionMappingRule.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.Mapping.ExtensionMappingRule"/> class.
            </summary>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.ExtensionMappingRule.Inedo#Web#Handlers#Mapping#IHandlerMappingRule#CanGetHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns a value indicating whether the handler should be used.
            </summary>
            <param name="args">The arguments supplied to the handler.</param>
            <returns>
            Value indicating whether the handler should be used.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.Mapping.HandlerMap">
            <summary>
            Implements a standard mapping of multiple handlers.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.HandlerMap.MapHandler(Inedo.Web.Handlers.Mapping.IHandlerMappingRule,Inedo.Web.Handlers.Handler)">
            <summary>
            Maps a handler using the specified mapping rule.
            </summary>
            <param name="rule">Mapping rule used for the handler.</param>
            <param name="handler">The handler to map.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.Mapping.HandlerMap.GetHandlersEnumerator(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns all of the handlers that currently apply.
            </summary>
            <param name="args">Additional information about the context used for filtering handlers.</param>
            <returns>
            Handlers that meet the current criteria.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.RedirectHandler">
            <summary>
            A <see cref="T:Inedo.Web.Handlers.Handler"/> that performs a redirect to another URL.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.RedirectHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.RedirectHandler"/> class.
            </summary>
            <param name="url">The URL to redirect to.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.RedirectHandler.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.RedirectHandler"/> class.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <param name="permanent">Value indicating whether the redirect is permanent.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.RedirectHandler.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.RedirectHandler"/> class.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <param name="permanent">Value indicating whether the redirect is permanent.</param>
            <param name="copyQueryString">Value indicating whether to copy the query string.</param>
        </member>
        <member name="M:Inedo.Web.Handlers.RedirectHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="T:Inedo.Web.Handlers.SimpleHandler">
            <summary>
            Abstract base class for any handler that outputs directly to the response stream.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.SimpleHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.SimpleHandler"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.SimpleHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the
            <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">
            A <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.
            </param>
        </member>
        <member name="M:Inedo.Web.Handlers.SimpleHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Inedo.Web.Handlers.SimpleHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler.
            </summary>
            <param name="context">
            A <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.
            </param>
        </member>
        <member name="M:Inedo.Web.Handlers.SimpleHandler.ProcessError(System.Web.HttpContext,System.Exception)">
            <summary>
            Handles an exception which occurred while processing the request.
            </summary>
            <param name="context">
            A <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.
            </param>
            <param name="ex">The unhandle exception which occurred during the request.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.SimpleHandler.System#Web#IHttpHandler#IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.SimpleHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.SimpleHandler.ResponseContentType">
            <summary>
            Gets the content type of the response.
            </summary>
            <remarks>
            The default is text/plain.
            </remarks>
        </member>
        <member name="P:Inedo.Web.Handlers.SimpleHandler.ResponseContentEncoding">
            <summary>
            Gets the encoding of the response content.
            </summary>
            <remarks>
            The default is UTF8.
            </remarks>
        </member>
        <member name="T:Inedo.Web.Handlers.ValidateHandlerRequestEventArgs">
            <summary>
            Event arguments to validate that a handler request is valid.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.ValidateHandlerRequestEventArgs.#ctor(Inedo.Web.Handlers.ProcessRequestDelegate,Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.ValidateHandlerRequestEventArgs"/> class.
            </summary>
            <param name="processRequest">The delegate which will process the request.</param>
            <param name="getHandlerParams">Contains information about the request.</param>
        </member>
        <member name="P:Inedo.Web.Handlers.ValidateHandlerRequestEventArgs.Delegate">
            <summary>
            Gets the process request delegate.
            </summary>
        </member>
        <member name="P:Inedo.Web.Handlers.ValidateHandlerRequestEventArgs.Params">
            <summary>
            Gets information about the request.
            </summary>
        </member>
        <member name="T:Inedo.Web.Handlers.WriteExceptionsAsTextAttribute">
            <summary>
            Used by the <see cref="T:Inedo.Web.Handlers.DynamicDelegateHandler"/> for a <see cref="T:Inedo.Web.Handlers.ProcessRequestDelegate"/> method,
            this indicates that unhandled exceptions should be written as plain text instead of handled through the default error handling mechanism.
            </summary>
        </member>
        <member name="M:Inedo.Web.Handlers.WriteExceptionsAsTextAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Handlers.WriteExceptionsAsTextAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.HttpArgumentAttribute">
            <summary>
            Indicates that a property represents an HTTP argument.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentAttribute.Decode(System.String,System.Type,System.Web.HttpContext)">
            <summary>
            Decodes the value of the HTTP argument.
            </summary>
            <param name="argumentName">Name of the HTTP argument.</param>
            <param name="targetType">Expected type of the HTTP argument.</param>
            <param name="context">The current HTTP context.</param>
            <returns>Value of the HTTP argument.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentAttribute.Encode(System.String,System.Object,Inedo.Web.HttpArgs.PageFreeUrlBuilder)">
            <summary>
            Writes an HTTP argument to a URL.
            </summary>
            <param name="argumentName">Name of the HTTP argument.</param>
            <param name="value">Value of the HTTP argument.</param>
            <param name="targetUrl">URL to which the argument is written.</param>
        </member>
        <member name="P:Inedo.Web.HttpArgs.HttpArgumentAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the HTTP argument is optional.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.HttpArgumentInfo">
            <summary>
            Contains information about an HTTP argument.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Web.HttpArgs.HttpArgumentInfo.Name">
            <summary>
            Gets the name of the argument.
            </summary>
        </member>
        <member name="P:Inedo.Web.HttpArgs.HttpArgumentInfo.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
        </member>
        <member name="P:Inedo.Web.HttpArgs.HttpArgumentInfo.Property">
            <summary>
            Gets the property which corresponds to the argument.
            </summary>
        </member>
        <member name="P:Inedo.Web.HttpArgs.HttpArgumentInfo.Attribute">
            <summary>
            Gets the attribute which describes the argument.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.HttpArgumentMissingException">
            <summary>
            The exception that is thrown when a required HTTP argument is missing.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.HttpArgumentException">
            <summary>
            The exception that is thrown when there is a problem with an HTTP argument.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentException"/> class.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentMissingException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentMissingException"/> class.
            </summary>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.HttpArgumentMissingException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.Web.HttpArgs.HttpArgumentProvider">
            <summary>
            Provides access to PageFree HTTP arguments.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentProvider.InitializeArguments(System.Web.UI.Page,System.Web.HttpContext)">
            <summary>
            Decodes HTTP arguments and assigns them to a page's properties.
            </summary>
            <param name="page">Instace of page to assign argument values to.</param>
            <param name="context">The current HTTP context.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentProvider.BuildUrl``1">
            <summary>
            Returns the canonical URL of a page with no arguments.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <returns>Canonical URL of the page.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentProvider.BuildUrl``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Returns the canonical URL of a page with arguments.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="arguments">Arguments to pass to the page.</param>
            <returns>Canonical URL of the page with its arguments.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentProvider.BuildUrl``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Returns the URL of a page with arguments.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="canonicalUrl">The canonical URL of the page.</param>
            <param name="arguments">Arguments to pass to the page.</param>
            <returns>URL of the page with its arguments.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.HttpArgumentProvider.GetArguments(System.Type)">
            <summary>
            Returns the HTTP arguments of a page.
            </summary>
            <param name="pageType">The type of the page.</param>
            <returns>HTTP arguments of the page.</returns>
        </member>
        <member name="T:Inedo.Web.HttpArgs.PageFreeUrlBuilder">
            <summary>
            Facilitates construction of a PageFree-style URL.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.PageFreeUrlBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.PageFreeUrlBuilder"/> class.
            </summary>
            <param name="pageUrl">The canonical page URL.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.PageFreeUrlBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Web.HttpArgs.PageFreeUrlBuilder.PageUrl">
            <summary>
            Gets the canonical page URL.
            </summary>
        </member>
        <member name="P:Inedo.Web.HttpArgs.PageFreeUrlBuilder.UrlArguments">
            <summary>
            Gets the arguments to pass in as part of the URL path.
            </summary>
        </member>
        <member name="P:Inedo.Web.HttpArgs.PageFreeUrlBuilder.QueryArguments">
            <summary>
            Gets the arguments to pass in as part of the query string.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.QualifiedTypeQueryStringArgumentAttribute">
            <summary>
            Indicates that a property represents an HTTP argument that is a <see cref="T:System.Type"/> passed via query string.
            </summary>
        </member>
        <member name="T:Inedo.Web.HttpArgs.QueryStringArgumentAttribute">
            <summary>
            Indicates that a property represents an HTTP argument that is passed via query string.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.QueryStringArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.ConvertFromString(System.Type,System.String)">
            <summary>
            Returns the value of an argument parsed from a string.
            </summary>
            <param name="targetType">Type to convert the value to.</param>
            <param name="value">Argument value as a string. The string has already been URL decoded.</param>
            <returns>Parsed value of the argument.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.ConvertToString(System.Object)">
            <summary>
            Returns the string representation of an argument.
            </summary>
            <param name="value">Value to convert to a string.</param>
            <returns>String representatino of the argument value. The string should not be URL encoded.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.Decode(System.String,System.Type,System.Web.HttpContext)">
            <summary>
            Decodes the value of the HTTP argument.
            </summary>
            <param name="argumentName">Name of the HTTP argument.</param>
            <param name="targetType">Expected type of the HTTP argument.</param>
            <param name="context">The current HTTP context.</param>
            <returns>Value of the HTTP argument.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.Encode(System.String,System.Object,Inedo.Web.HttpArgs.PageFreeUrlBuilder)">
            <summary>
            Writes an HTTP argument to a URL.
            </summary>
            <param name="argumentName">Name of the HTTP argument.</param>
            <param name="value">Value of the HTTP argument.</param>
            <param name="targetUrl">URL to which the argument is written.</param>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.ConvertToStringInternal(System.Object)">
            <summary>
            Returns the string representation of a value. The value may be an array.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.ConvertFromStringInternal(System.Type,System.String)">
            <summary>
            Returns the value of an argument parsed from a string. This may return an array.
            </summary>
            <param name="targetType">Type to convert the value to.</param>
            <param name="value">Argument value as a string. The string has already been URL decoded.</param>
            <returns>Parsed value of the argument.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QueryStringArgumentAttribute.Split(System.String)">
            <summary>
            Splits the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The split value.</returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QualifiedTypeQueryStringArgumentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.QualifiedTypeQueryStringArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QualifiedTypeQueryStringArgumentAttribute.ConvertFromString(System.Type,System.String)">
            <summary>
            Returns the value of an argument parsed from a string.
            </summary>
            <param name="targetType">Type to convert the value to.</param>
            <param name="value">Argument value as a string. The string has already been URL decoded.</param>
            <returns>
            Parsed value of the argument.
            </returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.QualifiedTypeQueryStringArgumentAttribute.ConvertToString(System.Object)">
            <summary>
            Returns the string representation of an argument.
            </summary>
            <param name="value">Value to convert to a string.</param>
            <returns>
            String representatino of the argument value. The string should not be URL encoded.
            </returns>
        </member>
        <member name="T:Inedo.Web.HttpArgs.YNQueryStringArgumentAttribute">
            <summary>
            Indicates that a property represents a boolean HTTP argument that is passed via query string.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.YNQueryStringArgumentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.HttpArgs.YNQueryStringArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.HttpArgs.YNQueryStringArgumentAttribute.ConvertFromString(System.Type,System.String)">
            <summary>
            Returns the value of an argument parsed from a string.
            </summary>
            <param name="targetType">Type to convert the value to.</param>
            <param name="value">Argument value as a string. The string has already been URL decoded.</param>
            <returns>
            Parsed value of the argument.
            </returns>
        </member>
        <member name="M:Inedo.Web.HttpArgs.YNQueryStringArgumentAttribute.ConvertToString(System.Object)">
            <summary>
            Returns the string representation of an argument.
            </summary>
            <param name="value">Value to convert to a string.</param>
            <returns>
            String representatino of the argument value. The string should not be URL encoded.
            </returns>
        </member>
        <member name="T:Inedo.Web.InedoHttpModule">
            <summary>
            Base class for Inedo HTTP module implementations.
            </summary>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.InedoHttpModule"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.BeginRequest(System.Web.HttpApplication)">
            <summary>
            Invoked at the beginning of a request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.BeginFirstRequest(System.Web.HttpApplication)">
            <summary>
            Begins the first request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.AuthenticateRequest(System.Web.HttpApplication)">
            <summary>
            Authenticates the request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.PostAuthenticateRequest(System.Web.HttpApplication)">
            <summary>
            Posts the authenticate request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.AuthorizeRequest(System.Web.HttpApplication)">
            <summary>
            Authorizes the request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.PostMapRequestHandler(System.Web.HttpApplication)">
            <summary>
            Posts the map request handler.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.EndRequest(System.Web.HttpApplication)">
            <summary>
            Ends the request.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.Error(System.Web.HttpApplication)">
            <summary>
            Errors the specified app.
            </summary>
            <param name="app">The HTTP application.</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Inedo.Web.InedoHttpModule.System#Web#IHttpModule#Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="T:Inedo.Web.MimeMapping">
            <summary>
            Provides a mapping of commom MIME types accessible by file extension.
            </summary>
        </member>
        <member name="M:Inedo.Web.MimeMapping.GetMimeMapping(System.String)">
            <summary>
            Returns the MIME type mapped to the extension of the specified file name.
            </summary>
            <param name="fileName">File name to return MIME mapping for.</param>
            <returns>The MIME type mapped to the specified file name.</returns>
        </member>
        <member name="T:Inedo.Web.PageFree.AlternateUrlAttribute">
            <summary>
            Specifies an alternate URL for a <see cref="T:System.Web.UI.Page"/> that is to be served through instantiation.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.AlternateUrlAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.AlternateUrlAttribute"/> class.
            </summary>
            <param name="alternateUrl">The alternate URL.</param>
        </member>
        <member name="M:Inedo.Web.PageFree.AlternateUrlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.AlternateUrlAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.AlternateUrlAttribute.AlternateUrl">
            <summary>
            Gets the alternate URL.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.AlternateUrlAttribute.RedirectType">
            <summary>
            Gets the type of the redirect.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.AlternateUrlAttribute.CopyQueryString">
            <summary>
            Gets or sets a value indicating whether to copy the query string on a redirect.
            </summary>
        </member>
        <member name="T:Inedo.Web.PageFree.RedirectType">
            <summary>
            Specifies the type of a redirect.
            </summary>
        </member>
        <member name="F:Inedo.Web.PageFree.RedirectType.None">
            <summary>
            Do not redirect.
            </summary>
        </member>
        <member name="F:Inedo.Web.PageFree.RedirectType.Permanent">
            <summary>
            Perform a permanent redirect.
            </summary>
        </member>
        <member name="F:Inedo.Web.PageFree.RedirectType.Temporary">
            <summary>
            Perform a temporary redirect.
            </summary>
        </member>
        <member name="T:Inedo.Web.PageFree.CanonicalUrlAttribute">
            <summary>
            Specifies the canonical URL for a <see cref="T:System.Web.UI.Page"/> that is to be served through instantiation.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.CanonicalUrlAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.CanonicalUrlAttribute"/> class.
            </summary>
            <param name="canonicalUrl">The canonical URL.</param>
        </member>
        <member name="M:Inedo.Web.PageFree.CanonicalUrlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.CanonicalUrlAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.CanonicalUrlAttribute.CanonicalUrl">
            <summary>
            Gets the canonical URL.
            </summary>
        </member>
        <member name="T:Inedo.ProGet.WebApplication.Controls.FauxMasterPage">
            <summary>
            Simple templating system used as a lightweight alternative to master pages.
            </summary>
        </member>
        <member name="M:Inedo.ProGet.WebApplication.Controls.FauxMasterPage.Render(System.Web.UI.HtmlTextWriter,System.String,System.Object)">
            <summary>
            Renders the specified page.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> to write the page to.</param>
            <param name="resource">The full or partial name of the embedded resource containing the template.</param>
            <param name="replacements">Object to use for template replacement values.</param>
        </member>
        <member name="T:Inedo.Web.PageFree.ModalPageAttribute">
            <summary>
            Indicates that the page should be rendered as a modal.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.ModalPageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.ModalPageAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.Web.PageFree.PageFreeHandler">
            <summary>
            A <see cref="T:Inedo.Web.Handlers.Handler"/> for serving "aspx-less" pages.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.PageFreeHandler.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.PageFreeHandler"/> class.
            </summary>
            <param name="asm">The assembly to scan for page free pages.</param>
        </member>
        <member name="M:Inedo.Web.PageFree.PageFreeHandler.GetHttpHandler(Inedo.Web.Handlers.GetHandlerParams)">
            <summary>
            Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="args">The args.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="T:Inedo.Web.PageFree.PageTitleAttribute">
            <summary>
            Specifies the <see cref="P:System.Web.UI.Page.Title"/> property when applied to a PageFree page.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.PageTitleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.PageTitleAttribute"/> class.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="P:Inedo.Web.PageFree.PageTitleAttribute.Title">
            <summary>
            Gets the page title.
            </summary>
        </member>
        <member name="T:Inedo.Web.PageFree.RegexUrlAttribute">
            <summary>
            Denotes a dynamic URL for a <see cref="T:System.Web.UI.Page"/> that is to be served through instantiation.
            </summary>
        </member>
        <member name="M:Inedo.Web.PageFree.RegexUrlAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.RegexUrlAttribute"/> class.
            </summary>
            <param name="rootUrl">The root URL.</param>
            <param name="matchExpression">The match expression.</param>
        </member>
        <member name="M:Inedo.Web.PageFree.RegexUrlAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.RegexUrlAttribute"/> class.
            </summary>
            <param name="matchExpression">The match expression.</param>
        </member>
        <member name="M:Inedo.Web.PageFree.RegexUrlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.PageFree.RegexUrlAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.RegexUrlAttribute.RootUrl">
            <summary>
            Gets the URL fragment that forms the basis for the canonical URL of the page.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.RegexUrlAttribute.MatchExpression">
            <summary>
            Gets the regular expression to be appended to the end of the <see cref="P:Inedo.Web.PageFree.RegexUrlAttribute.RootUrl"/> property.
            </summary>
        </member>
        <member name="P:Inedo.Web.PageFree.RegexUrlAttribute.FullExpression">
            <summary>
            Gets the combined regular expression including the <see cref="P:Inedo.Web.PageFree.RegexUrlAttribute.RootUrl"/> property.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.AspWorkerRequest">
            <summary>
            Provides information for an ASP.NET request.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.#ctor(System.Net.HttpListenerContext,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.AspWorkerRequest"/> class.
            </summary>
            <param name="context">The HTTP context of the request.</param>
            <param name="virtualDir">The root virtual directory.</param>
            <param name="physicalDir">The root physical directory.</param>
            <param name="useDefaultPages">Value indicating whether default.aspx is used.</param>
            <param name="allowSetHeaderWwwAuthenticate">if set to <c>true</c> allow set header WWW authenticate.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.EndOfRequest">
            <summary>
            Used by the runtime to notify the <see cref="T:System.Web.HttpWorkerRequest"/> that request processing for the current request is complete.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.FlushResponse(System.Boolean)">
            <summary>
            Sends all pending response data to the client.
            </summary>
            <param name="finalFlush">true if this is the last time response data will be flushed; otherwise, false.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetHttpVerbName">
            <summary>
            Returns the specified member of the request header.
            </summary>
            <returns>
            The HTTP verb returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetHttpVersion">
            <summary>
            Provides access to the HTTP version of the request (for example, "HTTP/1.1").
            </summary>
            <returns>
            The HTTP version returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetLocalAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server IP address returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetLocalPort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server port number returned in the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetQueryString">
            <summary>
            Returns the query string specified in the request URL.
            </summary>
            <returns>
            The request query string.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRawUrl">
            <summary>
            Returns the URL path contained in the request header with the query string appended.
            </summary>
            <returns>
            The raw URL path of the request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRemoteAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The client's IP address.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetRemotePort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The client's HTTP port number.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUriPath">
            <summary>
            Returns the virtual path to the requested URI.
            </summary>
            <returns>
            The path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
            <summary>
            Adds a standard HTTP header to the response.
            </summary>
            <param name="index">The header index. For example, <see cref="F:System.Web.HttpWorkerRequest.HeaderContentLength"/>.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="handle">The handle of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="filename">The name of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendResponseFromMemory(System.Byte[],System.Int32)">
            <summary>
            Adds the specified number of bytes from a byte array to the response.
            </summary>
            <param name="data">The byte array to send.</param>
            <param name="length">The number of bytes to send, starting at the first byte.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendStatus(System.Int32,System.String)">
            <summary>
            Specifies the HTTP status code and status description of the response, such as SendStatus(200, "Ok").
            </summary>
            <param name="statusCode">The status code to send</param>
            <param name="statusDescription">The status description to send.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
            <summary>
            Adds a nonstandard HTTP header to the response.
            </summary>
            <param name="name">The name of the header to send.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.CloseConnection">
            <summary>
            Terminates the connection with the client.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetAppPath">
            <summary>
            Returns the virtual path to the currently executing server application.
            </summary>
            <returns>
            The virtual path of the current application.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetAppPathTranslated">
            <summary>
            Returns the physical path to the currently executing server application.
            </summary>
            <returns>
            The physical path of the current application.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.ReadEntityBody(System.Byte[],System.Int32)">
            <summary>
            Reads request data from the client (when not preloaded).
            </summary>
            <param name="buffer">The byte array to read data into.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>
            The number of bytes read.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUnknownRequestHeader(System.String)">
            <summary>
            Returns a nonstandard HTTP request header value.
            </summary>
            <param name="name">The header name.</param>
            <returns>
            The header value.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUnknownRequestHeaders">
            <summary>
            Get all nonstandard HTTP header name-value pairs.
            </summary>
            <returns>
            An array of header name-value pairs.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetKnownRequestHeader(System.Int32)">
            <summary>
            Returns the standard HTTP request header that corresponds to the specified index.
            </summary>
            <param name="index">The index of the header. For example, the <see cref="F:System.Web.HttpWorkerRequest.HeaderAllow"/> field.</param>
            <returns>
            The HTTP request header.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetServerVariable(System.String)">
            <summary>
            Returns a single server variable from a dictionary of server variables associated with the request.
            </summary>
            <param name="name">The name of the requested server variable.</param>
            <returns>
            The requested server variable.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetFilePath">
            <summary>
            When overridden in a derived class, returns the virtual path to the requested URI.
            </summary>
            <returns>
            The path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetFilePathTranslated">
            <summary>
            Returns the physical file path to the requested URI (and translates it from virtual path to physical path: for example, "/proj1/page.aspx" to "c:\dir\page.aspx")
            </summary>
            <returns>
            The translated physical file path to the requested URI.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetPathInfo">
            <summary>
            Returns additional path information for a resource with a URL extension. That is, for the path /virdir/page.html/tail, the GetPathInfo value is /tail.
            </summary>
            <returns>
            Additional path information for a resource.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.AspWorkerRequest.GetUserToken">
            <summary>
            When overridden in a derived class, returns the client's impersonation token.
            </summary>
            <returns>
            A value representing the client's impersonation token. The default is 0.
            </returns>
        </member>
        <member name="T:Inedo.Web.Server.HttpListenerHost">
            <summary>
            Hosts an ASP.NET site running via HttpListener.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.HttpListenerHost"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.Start(Inedo.Web.Server.WebServerConfiguration)">
            <summary>
            Starts listening for requests.
            </summary>
            <param name="settings">Web server configuration settings.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.Stop">
            <summary>
            Stops listening for requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.GetAppDomain">
            <summary>
            Returns the AppDomain on which the server is running.
            </summary>
            <returns>AppDomain which contains the server.</returns>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.HttpListenerHost.ProcessRequestAsync(System.IAsyncResult)">
            <summary>
            Handler for the BeginGetContext method.
            </summary>
            <param name="result">Result of the asynchronous operation.</param>
        </member>
        <member name="T:Inedo.Web.Server.IntegratedServer">
            <summary>
            Hosts an ASP.NET web application.
            </summary>
        </member>
        <member name="F:Inedo.Web.Server.IntegratedServer.AutoRestartDelay">
            <summary>
            Number of milliseconds to wait before attempting to restart the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.Web.Server.IntegratedServer"/> class from being created.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Create(Inedo.Web.Server.WebServerConfiguration)">
            <summary>
            Returns a new web server instance.
            </summary>
            <param name="settings">Web server configuration settings.</param>
            <returns>New web server instance.</returns>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.IsUsingIntegratedServer(System.Web.HttpRequest)">
            <summary>
            Determines whether the specified request was created by the integrated web server
            </summary>
            <param name="request">The request.</param>
            <returns>
              <c>true</c> if the specified request is using integrated server; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Start">
            <summary>
            Starts servicing requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.Stop">
            <summary>
            Stops servicing requests.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.IntegratedServer.ProcessRequests">
            <summary>
            Processes server requests.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.IntegratedServer.Settings">
            <summary>
            Gets the configuration settings used to create this server instance.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.IntegratedServer.IsRunning">
            <summary>
            Gets a value indicating whether the web server is running.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.HttpApi">
            <summary>
            Contains methods for registering prefixes with http.sys.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.ReserveUrl(Inedo.Web.Server.UrlReservation)">
            <summary>
            Reserves a URL.
            </summary>
            <param name="reservation">URL reservation information.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.DeleteReservation(System.String)">
            <summary>
            Deletes a URL reservation.
            </summary>
            <param name="url">URL reservation.</param>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.GetAllReservations">
            <summary>
            Returns a list of all URL reservations.
            </summary>
            <returns>All URL reservations in the system.</returns>
        </member>
        <member name="T:Inedo.Web.Server.HttpApi.HttpApiInternal">
            <summary>
            Provides access to the HTTP API.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.HttpApi.HttpApiInternal"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Inedo.Web.Server.HttpApi.HttpApiInternal"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.HttpApi.HttpApiInternal.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Inedo.Web.Server.UrlReservation">
            <summary>
            Represents a URL reservation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.#ctor(System.String,System.Security.AccessControl.DiscretionaryAcl)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservation"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="dacl">The ACL for the reservation.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.#ctor(System.String,Inedo.Web.Server.UrlReservationAccount[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservation"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="accounts">The accounts.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.GetSddl">
            <summary>
            Returns an SDDL constructed from this instance.
            </summary>
            <returns>SDDL constructed from this instance.</returns>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservation.Prefix">
            <summary>
            Gets the URL prefix.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservation.Accounts">
            <summary>
            Gets the user accounts which hold this reservation.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.UrlReservationAccount">
            <summary>
            Represents a user account associated with a URL reservation.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservationAccount"/> class.
            </summary>
            <param name="sid">The sid.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.UrlReservationAccount"/> class.
            </summary>
            <param name="user">The user account name. This may include the domain name.</param>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.UrlReservationAccount.GetSid(System.String)">
            <summary>
            Returns a SID constructed from a user name and a domain name.
            </summary>
            <param name="user">The user name.</param>
            <returns>SID constructed from the specified parameters.</returns>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservationAccount.Sid">
            <summary>
            Gets the sid.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.UrlReservationAccount.TranslatedName">
            <summary>
            Gets the translated name of the user account.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration">
            <summary>
            Contains web server configuration settings.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.Clone">
            <summary>
            Returns a copy of the configuration.
            </summary>
            <returns>Copy of the configuration.</returns>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.VirtualPath">
            <summary>
            Gets or sets the application's root virtual path.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.PhysicalPath">
            <summary>
            Gets or sets the physical root path of the application.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.UseDefaultPages">
            <summary>
            Gets or sets a value indicating whether default.aspx is used.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.Prefixes">
            <summary>
            Gets the collection of prefixes registered to the application.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.AuthenticationSchemeSelectorDelegate">
            <summary>
            Gets or sets the delegate called to determine the protocol used to authenticate clients.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.AllowSetHeaderWwwAuthenticate">
            <summary>
            Gets or sets a value indicating whether allow set header WWW authenticate.
            </summary>
            <remarks>
            This is a fairly ugly hack that uses reflection
            </remarks>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix">
            <summary>
            Describes a prefix registered to the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix"/> class.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <param name="port">The port on which the server listens.</param>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Parse(System.String)">
            <summary>
            Returns a WebServerPrefix parsed from a string.
            </summary>
            <param name="s">String to parse.</param>
            <returns>WebServerPrefix parsed from the input string.</returns>
            <remarks>
            The string should be in the form: http://hostname:port
            </remarks>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.HostName">
            <summary>
            Gets the name or IP address of the host.
            </summary>
        </member>
        <member name="P:Inedo.Web.Server.WebServerConfiguration.WebServerPrefix.Port">
            <summary>
            Gets the port on which the server listens.
            </summary>
        </member>
        <member name="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection">
            <summary>
            Contains prefixes recognized by the web server.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection"/> class.
            </summary>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.Add(System.String)">
            <summary>
            Adds a new prefix to the collection.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <returns>Newly-added prefix.</returns>
        </member>
        <member name="M:Inedo.Web.Server.WebServerConfiguration.WebServerPrefixCollection.Add(System.String,System.Int32)">
            <summary>
            Adds a new prefix to the collection.
            </summary>
            <param name="hostName">Name or IP address of the host.</param>
            <param name="port">Port of the host.</param>
            <returns>Newly-added prefix.</returns>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS">
            <summary>
            Access to the service. Before granting the requested access, the
            system checks the access token of the calling process. 
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_QUERY_CONFIG">
            <summary>
            Required to call the QueryServiceConfig and 
            QueryServiceConfig2 functions to query the service configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_CHANGE_CONFIG">
            <summary>
            Required to call the ChangeServiceConfig or ChangeServiceConfig2 function 
            to change the service configuration. Because this grants the caller 
            the right to change the executable file that the system runs, 
            it should be granted only to administrators.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_QUERY_STATUS">
            <summary>
            Required to call the QueryServiceStatusEx function to ask the service 
            control manager about the status of the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_ENUMERATE_DEPENDENTS">
            <summary>
            Required to call the EnumDependentServices function to enumerate all 
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_START">
            <summary>
            Required to call the StartService function to start the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_STOP">
            <summary>
                Required to call the ControlService function to stop the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_PAUSE_CONTINUE">
            <summary>
            Required to call the ControlService function to pause or continue 
            the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_INTERROGATE">
            <summary>
            Required to call the EnumDependentServices function to enumerate all
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_USER_DEFINED_CONTROL">
            <summary>
            Required to call the ControlService function to specify a user-defined
            control code.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.SERVICE_ALL_ACCESS">
            <summary>
            Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights in this table.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.ACCESS_SYSTEM_SECURITY">
            <summary>
            Required to call the QueryServiceObjectSecurity or 
            SetServiceObjectSecurity function to access the SACL. The proper
            way to obtain this access is to enable the SE_SECURITY_NAME 
            privilege in the caller's current access token, open the handle 
            for ACCESS_SYSTEM_SECURITY access, and then disable the privilege.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.DELETE">
            <summary>
            Required to call the DeleteService function to delete the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.READ_CONTROL">
            <summary>
            Required to call the QueryServiceObjectSecurity function to query
            the security descriptor of the service object.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.WRITE_DAC">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify
            the Dacl member of the service object's security descriptor.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ACCESS.WRITE_OWNER">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify 
            the Owner and Group members of the service object's security 
            descriptor.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE">
            <summary>
            Service types.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_KERNEL_DRIVER">
            <summary>
            Driver service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_FILE_SYSTEM_DRIVER">
            <summary>
            File system driver service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_WIN32_OWN_PROCESS">
            <summary>
            Service that runs in its own process.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_WIN32_SHARE_PROCESS">
            <summary>
            Service that shares a process with one or more other services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_TYPE.SERVICE_INTERACTIVE_PROCESS">
            <summary>
            The service can interact with the desktop.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_START">
            <summary>
            Service start options
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_BOOT_START">
            <summary>
            A device driver started by the system loader. This value is valid
            only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_SYSTEM_START">
            <summary>
            A device driver started by the IoInitSystem function. This value 
            is valid only for driver services.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_AUTO_START">
            <summary>
            A service started automatically by the service control manager 
            during system startup. For more information, see Automatically 
            Starting Services.
            </summary>         
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_DEMAND_START">
            <summary>
            A service started by the service control manager when a process 
            calls the StartService function. For more information, see 
            Starting Services on Demand.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_START.SERVICE_DISABLED">
            <summary>
            A service that cannot be started. Attempts to start the service
            result in the error code ERROR_SERVICE_DISABLED.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR">
            <summary>
            Severity of the error, and action taken, if this service fails 
            to start.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_IGNORE">
            <summary>
            The startup program ignores the error and continues the startup
            operation.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_NORMAL">
            <summary>
            The startup program logs the error in the event log but continues
            the startup operation.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_SEVERE">
            <summary>
            The startup program logs the error in the event log. If the 
            last-known-good configuration is being started, the startup 
            operation continues. Otherwise, the system is restarted with 
            the last-known-good configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SERVICE_ERROR.SERVICE_ERROR_CRITICAL">
            <summary>
            The startup program logs the error in the event log, if possible.
            If the last-known-good configuration is being started, the startup
            operation fails. Otherwise, the system is restarted with the 
            last-known good configuration.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_CONNECT">
            <summary>
            Required to connect to the service control manager.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_CREATE_SERVICE">
            <summary>
            Required to call the CreateService function to create a service
            object and add it to the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_ENUMERATE_SERVICE">
            <summary>
            Required to call the EnumServicesStatusEx function to list the 
            services that are in the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_LOCK">
            <summary>
            Required to call the LockServiceDatabase function to acquire a 
            lock on the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_QUERY_LOCK_STATUS">
            <summary>
            Required to call the QueryServiceLockStatus function to retrieve 
            the lock status information for the database.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_MODIFY_BOOT_CONFIG">
            <summary>
            Required to call the NotifyBootConfigStatus function.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceApi.SCM_ACCESS.SC_MANAGER_ALL_ACCESS">
            <summary>
            Includes STANDARD_RIGHTS_REQUIRED, in addition to all access 
            rights in this table.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceControllerAction">
            <summary>
            Represents an action that the service control manager can perform.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.#ctor(Inedo.WindowsServices.ServiceControllerActionType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceControllerAction"/> struct.
            </summary>
            <param name="type">The action to be performed.</param>
            <param name="delay">The time to wait before performing the specified action.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delay"/> is less than zero or greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <remarks>
            The <paramref name="delay"/> parameter has a resolution of milliseconds.
            </remarks>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.op_Equality(Inedo.WindowsServices.ServiceControllerAction,Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            ==s the specified action1.
            </summary>
            <param name="action1">The action1.</param>
            <param name="action2">The action2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.op_Inequality(Inedo.WindowsServices.ServiceControllerAction,Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            !=s the specified action1.
            </summary>
            <param name="action1">The action1.</param>
            <param name="action2">The action2.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.Equals(Inedo.WindowsServices.ServiceControllerAction)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceControllerAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceControllerAction.Type">
            <summary>
            Gets the action to be performed.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceControllerAction.Delay">
            <summary>
            Gets the time to wait before performing the specified action.
            </summary>
            <remarks>
            This value has a resolution of milliseconds.
            </remarks>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceControllerActionType">
            <summary>
            The action to be performed.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.Restart">
            <summary>
            Restart the service.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.Reboot">
            <summary>
            Reboot the computer.
            </summary>
        </member>
        <member name="F:Inedo.WindowsServices.ServiceControllerActionType.RunCommand">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.ServiceFailureActions">
            <summary>
            Represents the action the service controller should take on each failure of a service.
            A service is considered failed when it terminates without reporting a status of SERVICE_STOPPED to the service controller.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},System.String,System.String,Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="rebootMessage">The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.</param>
            <param name="command">The command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},System.String,Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="rebootMessage">The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.ServiceFailureActions.#ctor(System.Nullable{System.Int32},Inedo.WindowsServices.ServiceControllerAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.WindowsServices.ServiceFailureActions"/> class.
            </summary>
            <param name="resetPeriod">The reset period in seconds. A value of null indicates that this should never be reset.</param>
            <param name="actions">The actions to perform.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actions"/> is null.</exception>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.ResetPeriod">
            <summary>
            Gets the time after which to reset the failure count to zero if there are no failures in seconds.
            A value of null indicates that this should never be reset.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.RebootMessage">
            <summary>
            Gets the message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.Command">
            <summary>
            Gets the command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.ServiceFailureActions.Actions">
            <summary>
            Gets the actions to perform.
            </summary>
        </member>
        <member name="T:Inedo.WindowsServices.WindowsService">
            <summary>
            Represents a Windows service on the local machine.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Inedo.WindowsServices.WindowsService"/> class.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.GetService(System.String)">
            <summary>
            Returns the service on the local machine with the specified name.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <returns>The service with the specified name or null if the service was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceName"/> is null or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The service controller could not be opened.</exception>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.CreateService(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a service and adds it to the local service controller database.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="displayName">The display name of the service.</param>
            <param name="fileName">The full path of the service's executable file.</param>
            <param name="userAccount">The user account the service will run as. See Remarks.</param>
            <param name="password">The password for the <paramref name="userAccount"/> parameter.</param>
            <returns>The newly-created service.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceName"/>, <paramref name="displayName"/>, or <paramref name="fileName"/> is null or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The service controller could not be opened or the service could not be created.</exception>
            <remarks>
            <para><paramref name="userAccount"/> is specified in the format: <c>domain\user</c></para>
            <para>Built-in accounts should be prefixed with <c>NT AUTHORITY</c>. For example: <c>NT AUTHORITY\LocalSystem</c>.</para>
            </remarks>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Delete">
            <summary>
            Deletes the service from the service controller.
            </summary>
        </member>
        <member name="M:Inedo.WindowsServices.WindowsService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.DisplayName">
            <summary>
            Gets the display name of the service.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.Description">
            <summary>
            Gets or sets the service's description.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.FailureActions">
            <summary>
            Gets or sets the failure actions to perform if the service crashes.
            </summary>
        </member>
        <member name="P:Inedo.WindowsServices.WindowsService.DelayedStart">
            <summary>
            Gets or sets a value indicating whether the delayed auto start feature is enabled for this service.
            </summary>
        </member>
    </members>
</doc>
